<?php
/**
 * Settings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Dynamic API Specification
 *
 * This is a dynamically generated API specification for all endpoints existing on the current project.
 *
 * OpenAPI spec version: 12.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.43
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Settings Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Settings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Settings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'project_name' => 'string',
'project_url' => 'string',
'project_color' => 'string',
'project_logo' => 'string',
'public_foreground' => 'string',
'public_background' => 'string',
'public_note' => 'string',
'auth_login_attempts' => 'int',
'auth_password_policy' => 'string',
'storage_asset_transform' => 'string',
'storage_asset_presets' => '\Swagger\Client\Model\SettingsStorageAssetPresets[]',
'custom_css' => 'string',
'storage_default_folder' => 'string',
'basemaps' => '',
'mapbox_key' => 'string',
'module_bar' => '',
'project_descriptor' => 'string',
'default_language' => 'string',
'custom_aspect_ratios' => '',
'branding_divider' => 'string',
'modules_divider' => 'string',
'security_divider' => 'string',
'files_divider' => 'string',
'map_divider' => 'string',
'image_editor' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'project_name' => null,
'project_url' => null,
'project_color' => null,
'project_logo' => null,
'public_foreground' => null,
'public_background' => null,
'public_note' => null,
'auth_login_attempts' => null,
'auth_password_policy' => null,
'storage_asset_transform' => null,
'storage_asset_presets' => null,
'custom_css' => null,
'storage_default_folder' => 'uuid',
'basemaps' => null,
'mapbox_key' => null,
'module_bar' => null,
'project_descriptor' => null,
'default_language' => null,
'custom_aspect_ratios' => null,
'branding_divider' => null,
'modules_divider' => null,
'security_divider' => null,
'files_divider' => null,
'map_divider' => null,
'image_editor' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'project_name' => 'project_name',
'project_url' => 'project_url',
'project_color' => 'project_color',
'project_logo' => 'project_logo',
'public_foreground' => 'public_foreground',
'public_background' => 'public_background',
'public_note' => 'public_note',
'auth_login_attempts' => 'auth_login_attempts',
'auth_password_policy' => 'auth_password_policy',
'storage_asset_transform' => 'storage_asset_transform',
'storage_asset_presets' => 'storage_asset_presets',
'custom_css' => 'custom_css',
'storage_default_folder' => 'storage_default_folder',
'basemaps' => 'basemaps',
'mapbox_key' => 'mapbox_key',
'module_bar' => 'module_bar',
'project_descriptor' => 'project_descriptor',
'default_language' => 'default_language',
'custom_aspect_ratios' => 'custom_aspect_ratios',
'branding_divider' => 'branding_divider',
'modules_divider' => 'modules_divider',
'security_divider' => 'security_divider',
'files_divider' => 'files_divider',
'map_divider' => 'map_divider',
'image_editor' => 'image_editor'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'project_name' => 'setProjectName',
'project_url' => 'setProjectUrl',
'project_color' => 'setProjectColor',
'project_logo' => 'setProjectLogo',
'public_foreground' => 'setPublicForeground',
'public_background' => 'setPublicBackground',
'public_note' => 'setPublicNote',
'auth_login_attempts' => 'setAuthLoginAttempts',
'auth_password_policy' => 'setAuthPasswordPolicy',
'storage_asset_transform' => 'setStorageAssetTransform',
'storage_asset_presets' => 'setStorageAssetPresets',
'custom_css' => 'setCustomCss',
'storage_default_folder' => 'setStorageDefaultFolder',
'basemaps' => 'setBasemaps',
'mapbox_key' => 'setMapboxKey',
'module_bar' => 'setModuleBar',
'project_descriptor' => 'setProjectDescriptor',
'default_language' => 'setDefaultLanguage',
'custom_aspect_ratios' => 'setCustomAspectRatios',
'branding_divider' => 'setBrandingDivider',
'modules_divider' => 'setModulesDivider',
'security_divider' => 'setSecurityDivider',
'files_divider' => 'setFilesDivider',
'map_divider' => 'setMapDivider',
'image_editor' => 'setImageEditor'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'project_name' => 'getProjectName',
'project_url' => 'getProjectUrl',
'project_color' => 'getProjectColor',
'project_logo' => 'getProjectLogo',
'public_foreground' => 'getPublicForeground',
'public_background' => 'getPublicBackground',
'public_note' => 'getPublicNote',
'auth_login_attempts' => 'getAuthLoginAttempts',
'auth_password_policy' => 'getAuthPasswordPolicy',
'storage_asset_transform' => 'getStorageAssetTransform',
'storage_asset_presets' => 'getStorageAssetPresets',
'custom_css' => 'getCustomCss',
'storage_default_folder' => 'getStorageDefaultFolder',
'basemaps' => 'getBasemaps',
'mapbox_key' => 'getMapboxKey',
'module_bar' => 'getModuleBar',
'project_descriptor' => 'getProjectDescriptor',
'default_language' => 'getDefaultLanguage',
'custom_aspect_ratios' => 'getCustomAspectRatios',
'branding_divider' => 'getBrandingDivider',
'modules_divider' => 'getModulesDivider',
'security_divider' => 'getSecurityDivider',
'files_divider' => 'getFilesDivider',
'map_divider' => 'getMapDivider',
'image_editor' => 'getImageEditor'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STORAGE_ASSET_TRANSFORM_ALL = 'all';
const STORAGE_ASSET_TRANSFORM_NONE = 'none';
const STORAGE_ASSET_TRANSFORM_PRESETS = 'presets';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStorageAssetTransformAllowableValues()
    {
        return [
            self::STORAGE_ASSET_TRANSFORM_ALL,
self::STORAGE_ASSET_TRANSFORM_NONE,
self::STORAGE_ASSET_TRANSFORM_PRESETS,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['project_url'] = isset($data['project_url']) ? $data['project_url'] : null;
        $this->container['project_color'] = isset($data['project_color']) ? $data['project_color'] : null;
        $this->container['project_logo'] = isset($data['project_logo']) ? $data['project_logo'] : null;
        $this->container['public_foreground'] = isset($data['public_foreground']) ? $data['public_foreground'] : null;
        $this->container['public_background'] = isset($data['public_background']) ? $data['public_background'] : null;
        $this->container['public_note'] = isset($data['public_note']) ? $data['public_note'] : null;
        $this->container['auth_login_attempts'] = isset($data['auth_login_attempts']) ? $data['auth_login_attempts'] : null;
        $this->container['auth_password_policy'] = isset($data['auth_password_policy']) ? $data['auth_password_policy'] : null;
        $this->container['storage_asset_transform'] = isset($data['storage_asset_transform']) ? $data['storage_asset_transform'] : null;
        $this->container['storage_asset_presets'] = isset($data['storage_asset_presets']) ? $data['storage_asset_presets'] : null;
        $this->container['custom_css'] = isset($data['custom_css']) ? $data['custom_css'] : null;
        $this->container['storage_default_folder'] = isset($data['storage_default_folder']) ? $data['storage_default_folder'] : null;
        $this->container['basemaps'] = isset($data['basemaps']) ? $data['basemaps'] : null;
        $this->container['mapbox_key'] = isset($data['mapbox_key']) ? $data['mapbox_key'] : null;
        $this->container['module_bar'] = isset($data['module_bar']) ? $data['module_bar'] : null;
        $this->container['project_descriptor'] = isset($data['project_descriptor']) ? $data['project_descriptor'] : null;
        $this->container['default_language'] = isset($data['default_language']) ? $data['default_language'] : null;
        $this->container['custom_aspect_ratios'] = isset($data['custom_aspect_ratios']) ? $data['custom_aspect_ratios'] : null;
        $this->container['branding_divider'] = isset($data['branding_divider']) ? $data['branding_divider'] : null;
        $this->container['modules_divider'] = isset($data['modules_divider']) ? $data['modules_divider'] : null;
        $this->container['security_divider'] = isset($data['security_divider']) ? $data['security_divider'] : null;
        $this->container['files_divider'] = isset($data['files_divider']) ? $data['files_divider'] : null;
        $this->container['map_divider'] = isset($data['map_divider']) ? $data['map_divider'] : null;
        $this->container['image_editor'] = isset($data['image_editor']) ? $data['image_editor'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStorageAssetTransformAllowableValues();
        if (!is_null($this->container['storage_asset_transform']) && !in_array($this->container['storage_asset_transform'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'storage_asset_transform', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Unique identifier for the setting.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string $project_name The name of the project.
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets project_url
     *
     * @return string
     */
    public function getProjectUrl()
    {
        return $this->container['project_url'];
    }

    /**
     * Sets project_url
     *
     * @param string $project_url The url of the project.
     *
     * @return $this
     */
    public function setProjectUrl($project_url)
    {
        $this->container['project_url'] = $project_url;

        return $this;
    }

    /**
     * Gets project_color
     *
     * @return string
     */
    public function getProjectColor()
    {
        return $this->container['project_color'];
    }

    /**
     * Sets project_color
     *
     * @param string $project_color The brand color of the project.
     *
     * @return $this
     */
    public function setProjectColor($project_color)
    {
        $this->container['project_color'] = $project_color;

        return $this;
    }

    /**
     * Gets project_logo
     *
     * @return string
     */
    public function getProjectLogo()
    {
        return $this->container['project_logo'];
    }

    /**
     * Sets project_logo
     *
     * @param string $project_logo The logo of the project.
     *
     * @return $this
     */
    public function setProjectLogo($project_logo)
    {
        $this->container['project_logo'] = $project_logo;

        return $this;
    }

    /**
     * Gets public_foreground
     *
     * @return string
     */
    public function getPublicForeground()
    {
        return $this->container['public_foreground'];
    }

    /**
     * Sets public_foreground
     *
     * @param string $public_foreground The foreground of the project.
     *
     * @return $this
     */
    public function setPublicForeground($public_foreground)
    {
        $this->container['public_foreground'] = $public_foreground;

        return $this;
    }

    /**
     * Gets public_background
     *
     * @return string
     */
    public function getPublicBackground()
    {
        return $this->container['public_background'];
    }

    /**
     * Sets public_background
     *
     * @param string $public_background The background of the project.
     *
     * @return $this
     */
    public function setPublicBackground($public_background)
    {
        $this->container['public_background'] = $public_background;

        return $this;
    }

    /**
     * Gets public_note
     *
     * @return string
     */
    public function getPublicNote()
    {
        return $this->container['public_note'];
    }

    /**
     * Sets public_note
     *
     * @param string $public_note Note rendered on the public pages of the app.
     *
     * @return $this
     */
    public function setPublicNote($public_note)
    {
        $this->container['public_note'] = $public_note;

        return $this;
    }

    /**
     * Gets auth_login_attempts
     *
     * @return int
     */
    public function getAuthLoginAttempts()
    {
        return $this->container['auth_login_attempts'];
    }

    /**
     * Sets auth_login_attempts
     *
     * @param int $auth_login_attempts Allowed authentication login attempts before the user's status is set to blocked.
     *
     * @return $this
     */
    public function setAuthLoginAttempts($auth_login_attempts)
    {
        $this->container['auth_login_attempts'] = $auth_login_attempts;

        return $this;
    }

    /**
     * Gets auth_password_policy
     *
     * @return string
     */
    public function getAuthPasswordPolicy()
    {
        return $this->container['auth_password_policy'];
    }

    /**
     * Sets auth_password_policy
     *
     * @param string $auth_password_policy Authentication password policy.
     *
     * @return $this
     */
    public function setAuthPasswordPolicy($auth_password_policy)
    {
        $this->container['auth_password_policy'] = $auth_password_policy;

        return $this;
    }

    /**
     * Gets storage_asset_transform
     *
     * @return string
     */
    public function getStorageAssetTransform()
    {
        return $this->container['storage_asset_transform'];
    }

    /**
     * Sets storage_asset_transform
     *
     * @param string $storage_asset_transform What transformations are allowed in the assets endpoint.
     *
     * @return $this
     */
    public function setStorageAssetTransform($storage_asset_transform)
    {
        $allowedValues = $this->getStorageAssetTransformAllowableValues();
        if (!is_null($storage_asset_transform) && !in_array($storage_asset_transform, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'storage_asset_transform', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['storage_asset_transform'] = $storage_asset_transform;

        return $this;
    }

    /**
     * Gets storage_asset_presets
     *
     * @return \Swagger\Client\Model\SettingsStorageAssetPresets[]
     */
    public function getStorageAssetPresets()
    {
        return $this->container['storage_asset_presets'];
    }

    /**
     * Sets storage_asset_presets
     *
     * @param \Swagger\Client\Model\SettingsStorageAssetPresets[] $storage_asset_presets Array of allowed
     *
     * @return $this
     */
    public function setStorageAssetPresets($storage_asset_presets)
    {
        $this->container['storage_asset_presets'] = $storage_asset_presets;

        return $this;
    }

    /**
     * Gets custom_css
     *
     * @return string
     */
    public function getCustomCss()
    {
        return $this->container['custom_css'];
    }

    /**
     * Sets custom_css
     *
     * @param string $custom_css custom_css
     *
     * @return $this
     */
    public function setCustomCss($custom_css)
    {
        $this->container['custom_css'] = $custom_css;

        return $this;
    }

    /**
     * Gets storage_default_folder
     *
     * @return string
     */
    public function getStorageDefaultFolder()
    {
        return $this->container['storage_default_folder'];
    }

    /**
     * Sets storage_default_folder
     *
     * @param string $storage_default_folder Default folder to place files
     *
     * @return $this
     */
    public function setStorageDefaultFolder($storage_default_folder)
    {
        $this->container['storage_default_folder'] = $storage_default_folder;

        return $this;
    }

    /**
     * Gets basemaps
     *
     * @return 
     */
    public function getBasemaps()
    {
        return $this->container['basemaps'];
    }

    /**
     * Sets basemaps
     *
     * @param  $basemaps basemaps
     *
     * @return $this
     */
    public function setBasemaps($basemaps)
    {
        $this->container['basemaps'] = $basemaps;

        return $this;
    }

    /**
     * Gets mapbox_key
     *
     * @return string
     */
    public function getMapboxKey()
    {
        return $this->container['mapbox_key'];
    }

    /**
     * Sets mapbox_key
     *
     * @param string $mapbox_key mapbox_key
     *
     * @return $this
     */
    public function setMapboxKey($mapbox_key)
    {
        $this->container['mapbox_key'] = $mapbox_key;

        return $this;
    }

    /**
     * Gets module_bar
     *
     * @return 
     */
    public function getModuleBar()
    {
        return $this->container['module_bar'];
    }

    /**
     * Sets module_bar
     *
     * @param  $module_bar module_bar
     *
     * @return $this
     */
    public function setModuleBar($module_bar)
    {
        $this->container['module_bar'] = $module_bar;

        return $this;
    }

    /**
     * Gets project_descriptor
     *
     * @return string
     */
    public function getProjectDescriptor()
    {
        return $this->container['project_descriptor'];
    }

    /**
     * Sets project_descriptor
     *
     * @param string $project_descriptor project_descriptor
     *
     * @return $this
     */
    public function setProjectDescriptor($project_descriptor)
    {
        $this->container['project_descriptor'] = $project_descriptor;

        return $this;
    }

    /**
     * Gets default_language
     *
     * @return string
     */
    public function getDefaultLanguage()
    {
        return $this->container['default_language'];
    }

    /**
     * Sets default_language
     *
     * @param string $default_language default_language
     *
     * @return $this
     */
    public function setDefaultLanguage($default_language)
    {
        $this->container['default_language'] = $default_language;

        return $this;
    }

    /**
     * Gets custom_aspect_ratios
     *
     * @return 
     */
    public function getCustomAspectRatios()
    {
        return $this->container['custom_aspect_ratios'];
    }

    /**
     * Sets custom_aspect_ratios
     *
     * @param  $custom_aspect_ratios custom_aspect_ratios
     *
     * @return $this
     */
    public function setCustomAspectRatios($custom_aspect_ratios)
    {
        $this->container['custom_aspect_ratios'] = $custom_aspect_ratios;

        return $this;
    }

    /**
     * Gets branding_divider
     *
     * @return string
     */
    public function getBrandingDivider()
    {
        return $this->container['branding_divider'];
    }

    /**
     * Sets branding_divider
     *
     * @param string $branding_divider branding_divider
     *
     * @return $this
     */
    public function setBrandingDivider($branding_divider)
    {
        $this->container['branding_divider'] = $branding_divider;

        return $this;
    }

    /**
     * Gets modules_divider
     *
     * @return string
     */
    public function getModulesDivider()
    {
        return $this->container['modules_divider'];
    }

    /**
     * Sets modules_divider
     *
     * @param string $modules_divider modules_divider
     *
     * @return $this
     */
    public function setModulesDivider($modules_divider)
    {
        $this->container['modules_divider'] = $modules_divider;

        return $this;
    }

    /**
     * Gets security_divider
     *
     * @return string
     */
    public function getSecurityDivider()
    {
        return $this->container['security_divider'];
    }

    /**
     * Sets security_divider
     *
     * @param string $security_divider security_divider
     *
     * @return $this
     */
    public function setSecurityDivider($security_divider)
    {
        $this->container['security_divider'] = $security_divider;

        return $this;
    }

    /**
     * Gets files_divider
     *
     * @return string
     */
    public function getFilesDivider()
    {
        return $this->container['files_divider'];
    }

    /**
     * Sets files_divider
     *
     * @param string $files_divider files_divider
     *
     * @return $this
     */
    public function setFilesDivider($files_divider)
    {
        $this->container['files_divider'] = $files_divider;

        return $this;
    }

    /**
     * Gets map_divider
     *
     * @return string
     */
    public function getMapDivider()
    {
        return $this->container['map_divider'];
    }

    /**
     * Sets map_divider
     *
     * @param string $map_divider map_divider
     *
     * @return $this
     */
    public function setMapDivider($map_divider)
    {
        $this->container['map_divider'] = $map_divider;

        return $this;
    }

    /**
     * Gets image_editor
     *
     * @return string
     */
    public function getImageEditor()
    {
        return $this->container['image_editor'];
    }

    /**
     * Sets image_editor
     *
     * @param string $image_editor image_editor
     *
     * @return $this
     */
    public function setImageEditor($image_editor)
    {
        $this->container['image_editor'] = $image_editor;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
