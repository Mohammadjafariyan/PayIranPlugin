<?php
/**
 * FieldscollectionMeta
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Dynamic API Specification
 *
 * This is a dynamically generated API specification for all endpoints existing on the current project.
 *
 * OpenAPI spec version: 12.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.43
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FieldscollectionMeta Class Doc Comment
 *
 * @category Class
 * @description The meta info.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FieldscollectionMeta implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'fieldscollection_meta';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'collection' => 'string',
'field' => 'string',
'special' => 'string[]',
'system_interface' => 'string',
'options' => 'object',
'display' => 'string',
'display_options' => 'object',
'locked' => 'bool',
'readonly' => 'bool',
'hidden' => 'bool',
'sort' => 'int',
'width' => 'string',
'group' => 'int',
'translation' => 'object',
'note' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'collection' => null,
'field' => null,
'special' => null,
'system_interface' => null,
'options' => null,
'display' => null,
'display_options' => null,
'locked' => null,
'readonly' => null,
'hidden' => null,
'sort' => null,
'width' => null,
'group' => null,
'translation' => null,
'note' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'collection' => 'collection',
'field' => 'field',
'special' => 'special',
'system_interface' => 'system-interface',
'options' => 'options',
'display' => 'display',
'display_options' => 'display_options',
'locked' => 'locked',
'readonly' => 'readonly',
'hidden' => 'hidden',
'sort' => 'sort',
'width' => 'width',
'group' => 'group',
'translation' => 'translation',
'note' => 'note'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'collection' => 'setCollection',
'field' => 'setField',
'special' => 'setSpecial',
'system_interface' => 'setSystemInterface',
'options' => 'setOptions',
'display' => 'setDisplay',
'display_options' => 'setDisplayOptions',
'locked' => 'setLocked',
'readonly' => 'setReadonly',
'hidden' => 'setHidden',
'sort' => 'setSort',
'width' => 'setWidth',
'group' => 'setGroup',
'translation' => 'setTranslation',
'note' => 'setNote'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'collection' => 'getCollection',
'field' => 'getField',
'special' => 'getSpecial',
'system_interface' => 'getSystemInterface',
'options' => 'getOptions',
'display' => 'getDisplay',
'display_options' => 'getDisplayOptions',
'locked' => 'getLocked',
'readonly' => 'getReadonly',
'hidden' => 'getHidden',
'sort' => 'getSort',
'width' => 'getWidth',
'group' => 'getGroup',
'translation' => 'getTranslation',
'note' => 'getNote'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const WIDTH_HALF = 'half';
const WIDTH_HALF_LEFT = 'half-left';
const WIDTH_HALF_RIGHT = 'half-right';
const WIDTH_FULL = 'full';
const WIDTH_FILL = 'fill';
const WIDTH_NULL = 'null';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWidthAllowableValues()
    {
        return [
            self::WIDTH_HALF,
self::WIDTH_HALF_LEFT,
self::WIDTH_HALF_RIGHT,
self::WIDTH_FULL,
self::WIDTH_FILL,
self::WIDTH_NULL,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['collection'] = isset($data['collection']) ? $data['collection'] : null;
        $this->container['field'] = isset($data['field']) ? $data['field'] : null;
        $this->container['special'] = isset($data['special']) ? $data['special'] : null;
        $this->container['system_interface'] = isset($data['system_interface']) ? $data['system_interface'] : null;
        $this->container['options'] = isset($data['options']) ? $data['options'] : null;
        $this->container['display'] = isset($data['display']) ? $data['display'] : null;
        $this->container['display_options'] = isset($data['display_options']) ? $data['display_options'] : null;
        $this->container['locked'] = isset($data['locked']) ? $data['locked'] : null;
        $this->container['readonly'] = isset($data['readonly']) ? $data['readonly'] : null;
        $this->container['hidden'] = isset($data['hidden']) ? $data['hidden'] : null;
        $this->container['sort'] = isset($data['sort']) ? $data['sort'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['group'] = isset($data['group']) ? $data['group'] : null;
        $this->container['translation'] = isset($data['translation']) ? $data['translation'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getWidthAllowableValues();
        if (!is_null($this->container['width']) && !in_array($this->container['width'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'width', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Unique identifier for the field in the `directus_fields` collection.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets collection
     *
     * @return string
     */
    public function getCollection()
    {
        return $this->container['collection'];
    }

    /**
     * Sets collection
     *
     * @param string $collection Unique name of the collection this field is in.
     *
     * @return $this
     */
    public function setCollection($collection)
    {
        $this->container['collection'] = $collection;

        return $this;
    }

    /**
     * Gets field
     *
     * @return string
     */
    public function getField()
    {
        return $this->container['field'];
    }

    /**
     * Sets field
     *
     * @param string $field Unique name of the field. Field name is unique within the collection.
     *
     * @return $this
     */
    public function setField($field)
    {
        $this->container['field'] = $field;

        return $this;
    }

    /**
     * Gets special
     *
     * @return string[]
     */
    public function getSpecial()
    {
        return $this->container['special'];
    }

    /**
     * Sets special
     *
     * @param string[] $special Transformation flag for field
     *
     * @return $this
     */
    public function setSpecial($special)
    {
        $this->container['special'] = $special;

        return $this;
    }

    /**
     * Gets system_interface
     *
     * @return string
     */
    public function getSystemInterface()
    {
        return $this->container['system_interface'];
    }

    /**
     * Sets system_interface
     *
     * @param string $system_interface What interface is used in the admin app to edit the value for this field.
     *
     * @return $this
     */
    public function setSystemInterface($system_interface)
    {
        $this->container['system_interface'] = $system_interface;

        return $this;
    }

    /**
     * Gets options
     *
     * @return object
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param object $options Options for the interface that's used. This format is based on the individual interface.
     *
     * @return $this
     */
    public function setOptions($options)
    {
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets display
     *
     * @return string
     */
    public function getDisplay()
    {
        return $this->container['display'];
    }

    /**
     * Sets display
     *
     * @param string $display What display is used in the admin app to display the value for this field.
     *
     * @return $this
     */
    public function setDisplay($display)
    {
        $this->container['display'] = $display;

        return $this;
    }

    /**
     * Gets display_options
     *
     * @return object
     */
    public function getDisplayOptions()
    {
        return $this->container['display_options'];
    }

    /**
     * Sets display_options
     *
     * @param object $display_options Options for the display that's used. This format is based on the individual display.
     *
     * @return $this
     */
    public function setDisplayOptions($display_options)
    {
        $this->container['display_options'] = $display_options;

        return $this;
    }

    /**
     * Gets locked
     *
     * @return bool
     */
    public function getLocked()
    {
        return $this->container['locked'];
    }

    /**
     * Sets locked
     *
     * @param bool $locked If the field can be altered by the end user. Directus system fields have this value set to `true`.
     *
     * @return $this
     */
    public function setLocked($locked)
    {
        $this->container['locked'] = $locked;

        return $this;
    }

    /**
     * Gets readonly
     *
     * @return bool
     */
    public function getReadonly()
    {
        return $this->container['readonly'];
    }

    /**
     * Sets readonly
     *
     * @param bool $readonly Prevents the user from editing the value in the field.
     *
     * @return $this
     */
    public function setReadonly($readonly)
    {
        $this->container['readonly'] = $readonly;

        return $this;
    }

    /**
     * Gets hidden
     *
     * @return bool
     */
    public function getHidden()
    {
        return $this->container['hidden'];
    }

    /**
     * Sets hidden
     *
     * @param bool $hidden If this field should be hidden.
     *
     * @return $this
     */
    public function setHidden($hidden)
    {
        $this->container['hidden'] = $hidden;

        return $this;
    }

    /**
     * Gets sort
     *
     * @return int
     */
    public function getSort()
    {
        return $this->container['sort'];
    }

    /**
     * Sets sort
     *
     * @param int $sort Sort order of this field on the edit page of the admin app.
     *
     * @return $this
     */
    public function setSort($sort)
    {
        $this->container['sort'] = $sort;

        return $this;
    }

    /**
     * Gets width
     *
     * @return string
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param string $width Width of the field on the edit form.
     *
     * @return $this
     */
    public function setWidth($width)
    {
        $allowedValues = $this->getWidthAllowableValues();
        if (!is_null($width) && !in_array($width, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'width', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets group
     *
     * @return int
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param int $group What field group this field is part of.
     *
     * @return $this
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets translation
     *
     * @return object
     */
    public function getTranslation()
    {
        return $this->container['translation'];
    }

    /**
     * Sets translation
     *
     * @param object $translation Key value pair of `<language>: <translation>` that allows the user to change the displayed name of the field in the admin app.
     *
     * @return $this
     */
    public function setTranslation($translation)
    {
        $this->container['translation'] = $translation;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note A user provided note for the field. Will be rendered alongside the interface on the edit page.
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
