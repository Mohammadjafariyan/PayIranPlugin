<?php
/**
 * PermissionsIdBody
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Dynamic API Specification
 *
 * This is a dynamically generated API specification for all endpoints existing on the current project.
 *
 * OpenAPI spec version: 12.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.43
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PermissionsIdBody Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PermissionsIdBody implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'permissions_id_body';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'collection' => 'object',
'comment' => 'string',
'create' => 'string',
'delete' => 'string',
'explain' => 'string',
'read' => 'string',
'read_field_blacklist' => 'object',
'role' => 'object',
'status' => 'object',
'status_blacklist' => 'object',
'update' => 'string',
'write_field_blacklist' => 'object'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'collection' => null,
'comment' => null,
'create' => null,
'delete' => null,
'explain' => null,
'read' => null,
'read_field_blacklist' => null,
'role' => null,
'status' => null,
'status_blacklist' => null,
'update' => null,
'write_field_blacklist' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'collection' => 'collection',
'comment' => 'comment',
'create' => 'create',
'delete' => 'delete',
'explain' => 'explain',
'read' => 'read',
'read_field_blacklist' => 'read_field_blacklist',
'role' => 'role',
'status' => 'status',
'status_blacklist' => 'status_blacklist',
'update' => 'update',
'write_field_blacklist' => 'write_field_blacklist'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'collection' => 'setCollection',
'comment' => 'setComment',
'create' => 'setCreate',
'delete' => 'setDelete',
'explain' => 'setExplain',
'read' => 'setRead',
'read_field_blacklist' => 'setReadFieldBlacklist',
'role' => 'setRole',
'status' => 'setStatus',
'status_blacklist' => 'setStatusBlacklist',
'update' => 'setUpdate',
'write_field_blacklist' => 'setWriteFieldBlacklist'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'collection' => 'getCollection',
'comment' => 'getComment',
'create' => 'getCreate',
'delete' => 'getDelete',
'explain' => 'getExplain',
'read' => 'getRead',
'read_field_blacklist' => 'getReadFieldBlacklist',
'role' => 'getRole',
'status' => 'getStatus',
'status_blacklist' => 'getStatusBlacklist',
'update' => 'getUpdate',
'write_field_blacklist' => 'getWriteFieldBlacklist'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const COMMENT_NONE = 'none';
const COMMENT_CREATE = 'create';
const COMMENT_UPDATE = 'update';
const CREATE_NONE = 'none';
const CREATE_FULL = 'full';
const DELETE_NONE = 'none';
const DELETE_MINE = 'mine';
const DELETE_ROLE = 'role';
const DELETE_FULL = 'full';
const EXPLAIN_NONE = 'none';
const EXPLAIN_CREATE = 'create';
const EXPLAIN_UPDATE = 'update';
const EXPLAIN_ALWAYS = 'always';
const READ_NONE = 'none';
const READ_MINE = 'mine';
const READ_ROLE = 'role';
const READ_FULL = 'full';
const UPDATE_NONE = 'none';
const UPDATE_MINE = 'mine';
const UPDATE_ROLE = 'role';
const UPDATE_FULL = 'full';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCommentAllowableValues()
    {
        return [
            self::COMMENT_NONE,
self::COMMENT_CREATE,
self::COMMENT_UPDATE,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCreateAllowableValues()
    {
        return [
            self::CREATE_NONE,
self::CREATE_FULL,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeleteAllowableValues()
    {
        return [
            self::DELETE_NONE,
self::DELETE_MINE,
self::DELETE_ROLE,
self::DELETE_FULL,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExplainAllowableValues()
    {
        return [
            self::EXPLAIN_NONE,
self::EXPLAIN_CREATE,
self::EXPLAIN_UPDATE,
self::EXPLAIN_ALWAYS,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReadAllowableValues()
    {
        return [
            self::READ_NONE,
self::READ_MINE,
self::READ_ROLE,
self::READ_FULL,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUpdateAllowableValues()
    {
        return [
            self::UPDATE_NONE,
self::UPDATE_MINE,
self::UPDATE_ROLE,
self::UPDATE_FULL,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['collection'] = isset($data['collection']) ? $data['collection'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['create'] = isset($data['create']) ? $data['create'] : null;
        $this->container['delete'] = isset($data['delete']) ? $data['delete'] : null;
        $this->container['explain'] = isset($data['explain']) ? $data['explain'] : null;
        $this->container['read'] = isset($data['read']) ? $data['read'] : null;
        $this->container['read_field_blacklist'] = isset($data['read_field_blacklist']) ? $data['read_field_blacklist'] : null;
        $this->container['role'] = isset($data['role']) ? $data['role'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['status_blacklist'] = isset($data['status_blacklist']) ? $data['status_blacklist'] : null;
        $this->container['update'] = isset($data['update']) ? $data['update'] : null;
        $this->container['write_field_blacklist'] = isset($data['write_field_blacklist']) ? $data['write_field_blacklist'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCommentAllowableValues();
        if (!is_null($this->container['comment']) && !in_array($this->container['comment'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'comment', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCreateAllowableValues();
        if (!is_null($this->container['create']) && !in_array($this->container['create'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'create', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDeleteAllowableValues();
        if (!is_null($this->container['delete']) && !in_array($this->container['delete'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'delete', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getExplainAllowableValues();
        if (!is_null($this->container['explain']) && !in_array($this->container['explain'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'explain', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getReadAllowableValues();
        if (!is_null($this->container['read']) && !in_array($this->container['read'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'read', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUpdateAllowableValues();
        if (!is_null($this->container['update']) && !in_array($this->container['update'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'update', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets collection
     *
     * @return object
     */
    public function getCollection()
    {
        return $this->container['collection'];
    }

    /**
     * Sets collection
     *
     * @param object $collection What collection this permission applies to.
     *
     * @return $this
     */
    public function setCollection($collection)
    {
        $this->container['collection'] = $collection;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment If the user can post comments. `full`.
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $allowedValues = $this->getCommentAllowableValues();
        if (!is_null($comment) && !in_array($comment, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'comment', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets create
     *
     * @return string
     */
    public function getCreate()
    {
        return $this->container['create'];
    }

    /**
     * Sets create
     *
     * @param string $create If the user can create items.
     *
     * @return $this
     */
    public function setCreate($create)
    {
        $allowedValues = $this->getCreateAllowableValues();
        if (!is_null($create) && !in_array($create, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'create', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['create'] = $create;

        return $this;
    }

    /**
     * Gets delete
     *
     * @return string
     */
    public function getDelete()
    {
        return $this->container['delete'];
    }

    /**
     * Sets delete
     *
     * @param string $delete If the user can update items.
     *
     * @return $this
     */
    public function setDelete($delete)
    {
        $allowedValues = $this->getDeleteAllowableValues();
        if (!is_null($delete) && !in_array($delete, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'delete', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['delete'] = $delete;

        return $this;
    }

    /**
     * Gets explain
     *
     * @return string
     */
    public function getExplain()
    {
        return $this->container['explain'];
    }

    /**
     * Sets explain
     *
     * @param string $explain If the user is required to leave a comment explaining what was changed.
     *
     * @return $this
     */
    public function setExplain($explain)
    {
        $allowedValues = $this->getExplainAllowableValues();
        if (!is_null($explain) && !in_array($explain, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'explain', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['explain'] = $explain;

        return $this;
    }

    /**
     * Gets read
     *
     * @return string
     */
    public function getRead()
    {
        return $this->container['read'];
    }

    /**
     * Sets read
     *
     * @param string $read If the user can read items.
     *
     * @return $this
     */
    public function setRead($read)
    {
        $allowedValues = $this->getReadAllowableValues();
        if (!is_null($read) && !in_array($read, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'read', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['read'] = $read;

        return $this;
    }

    /**
     * Gets read_field_blacklist
     *
     * @return object
     */
    public function getReadFieldBlacklist()
    {
        return $this->container['read_field_blacklist'];
    }

    /**
     * Sets read_field_blacklist
     *
     * @param object $read_field_blacklist Explicitly denies read access for specific fields.
     *
     * @return $this
     */
    public function setReadFieldBlacklist($read_field_blacklist)
    {
        $this->container['read_field_blacklist'] = $read_field_blacklist;

        return $this;
    }

    /**
     * Gets role
     *
     * @return object
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param object $role Unique identifier of the role this permission applies to.
     *
     * @return $this
     */
    public function setRole($role)
    {
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets status
     *
     * @return object
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param object $status What status this permission applies to.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_blacklist
     *
     * @return object
     */
    public function getStatusBlacklist()
    {
        return $this->container['status_blacklist'];
    }

    /**
     * Sets status_blacklist
     *
     * @param object $status_blacklist Explicitly denies specific statuses to be used.
     *
     * @return $this
     */
    public function setStatusBlacklist($status_blacklist)
    {
        $this->container['status_blacklist'] = $status_blacklist;

        return $this;
    }

    /**
     * Gets update
     *
     * @return string
     */
    public function getUpdate()
    {
        return $this->container['update'];
    }

    /**
     * Sets update
     *
     * @param string $update If the user can update items.
     *
     * @return $this
     */
    public function setUpdate($update)
    {
        $allowedValues = $this->getUpdateAllowableValues();
        if (!is_null($update) && !in_array($update, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'update', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['update'] = $update;

        return $this;
    }

    /**
     * Gets write_field_blacklist
     *
     * @return object
     */
    public function getWriteFieldBlacklist()
    {
        return $this->container['write_field_blacklist'];
    }

    /**
     * Sets write_field_blacklist
     *
     * @param object $write_field_blacklist Explicitly denies write access for specific fields.
     *
     * @return $this
     */
    public function setWriteFieldBlacklist($write_field_blacklist)
    {
        $this->container['write_field_blacklist'] = $write_field_blacklist;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
