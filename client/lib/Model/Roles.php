<?php
/**
 * Roles
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Dynamic API Specification
 *
 * This is a dynamically generated API specification for all endpoints existing on the current project.
 *
 * OpenAPI spec version: 12.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.43
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Roles Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Roles implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Roles';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'name' => 'string',
'icon' => 'string',
'description' => 'string',
'ip_access' => 'string[]',
'enforce_tfa' => 'bool',
'admin_access' => 'bool',
'app_access' => 'bool',
'users' => '\Swagger\Client\Model\OneOfRolesUsersItems[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'name' => null,
'icon' => null,
'description' => null,
'ip_access' => null,
'enforce_tfa' => null,
'admin_access' => null,
'app_access' => null,
'users' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'name' => 'name',
'icon' => 'icon',
'description' => 'description',
'ip_access' => 'ip_access',
'enforce_tfa' => 'enforce_tfa',
'admin_access' => 'admin_access',
'app_access' => 'app_access',
'users' => 'users'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'name' => 'setName',
'icon' => 'setIcon',
'description' => 'setDescription',
'ip_access' => 'setIpAccess',
'enforce_tfa' => 'setEnforceTfa',
'admin_access' => 'setAdminAccess',
'app_access' => 'setAppAccess',
'users' => 'setUsers'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'name' => 'getName',
'icon' => 'getIcon',
'description' => 'getDescription',
'ip_access' => 'getIpAccess',
'enforce_tfa' => 'getEnforceTfa',
'admin_access' => 'getAdminAccess',
'app_access' => 'getAppAccess',
'users' => 'getUsers'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['icon'] = isset($data['icon']) ? $data['icon'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['ip_access'] = isset($data['ip_access']) ? $data['ip_access'] : null;
        $this->container['enforce_tfa'] = isset($data['enforce_tfa']) ? $data['enforce_tfa'] : null;
        $this->container['admin_access'] = isset($data['admin_access']) ? $data['admin_access'] : null;
        $this->container['app_access'] = isset($data['app_access']) ? $data['app_access'] : null;
        $this->container['users'] = isset($data['users']) ? $data['users'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique identifier for the role.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the role.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets icon
     *
     * @return string
     */
    public function getIcon()
    {
        return $this->container['icon'];
    }

    /**
     * Sets icon
     *
     * @param string $icon The role's icon.
     *
     * @return $this
     */
    public function setIcon($icon)
    {
        $this->container['icon'] = $icon;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of the role.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets ip_access
     *
     * @return string[]
     */
    public function getIpAccess()
    {
        return $this->container['ip_access'];
    }

    /**
     * Sets ip_access
     *
     * @param string[] $ip_access Array of IP addresses that are allowed to connect to the API as a user of this role.
     *
     * @return $this
     */
    public function setIpAccess($ip_access)
    {
        $this->container['ip_access'] = $ip_access;

        return $this;
    }

    /**
     * Gets enforce_tfa
     *
     * @return bool
     */
    public function getEnforceTfa()
    {
        return $this->container['enforce_tfa'];
    }

    /**
     * Sets enforce_tfa
     *
     * @param bool $enforce_tfa Whether or not this role enforces the use of 2FA.
     *
     * @return $this
     */
    public function setEnforceTfa($enforce_tfa)
    {
        $this->container['enforce_tfa'] = $enforce_tfa;

        return $this;
    }

    /**
     * Gets admin_access
     *
     * @return bool
     */
    public function getAdminAccess()
    {
        return $this->container['admin_access'];
    }

    /**
     * Sets admin_access
     *
     * @param bool $admin_access Admin role. If true, skips all permission checks.
     *
     * @return $this
     */
    public function setAdminAccess($admin_access)
    {
        $this->container['admin_access'] = $admin_access;

        return $this;
    }

    /**
     * Gets app_access
     *
     * @return bool
     */
    public function getAppAccess()
    {
        return $this->container['app_access'];
    }

    /**
     * Sets app_access
     *
     * @param bool $app_access The users in the role are allowed to use the app.
     *
     * @return $this
     */
    public function setAppAccess($app_access)
    {
        $this->container['app_access'] = $app_access;

        return $this;
    }

    /**
     * Gets users
     *
     * @return \Swagger\Client\Model\OneOfRolesUsersItems[]
     */
    public function getUsers()
    {
        return $this->container['users'];
    }

    /**
     * Sets users
     *
     * @param \Swagger\Client\Model\OneOfRolesUsersItems[] $users users
     *
     * @return $this
     */
    public function setUsers($users)
    {
        $this->container['users'] = $users;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
