<?php
/**
 * RelationsIdBody
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Dynamic API Specification
 *
 * This is a dynamically generated API specification for all endpoints existing on the current project.
 *
 * OpenAPI spec version: 12.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.43
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RelationsIdBody Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RelationsIdBody implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'relations_id_body';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'collection_many' => 'string',
'collection_one' => 'string',
'field_many' => 'string',
'field_one' => 'string',
'junction_field' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'collection_many' => null,
'collection_one' => null,
'field_many' => null,
'field_one' => null,
'junction_field' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'collection_many' => 'collection_many',
'collection_one' => 'collection_one',
'field_many' => 'field_many',
'field_one' => 'field_one',
'junction_field' => 'junction_field'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'collection_many' => 'setCollectionMany',
'collection_one' => 'setCollectionOne',
'field_many' => 'setFieldMany',
'field_one' => 'setFieldOne',
'junction_field' => 'setJunctionField'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'collection_many' => 'getCollectionMany',
'collection_one' => 'getCollectionOne',
'field_many' => 'getFieldMany',
'field_one' => 'getFieldOne',
'junction_field' => 'getJunctionField'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['collection_many'] = isset($data['collection_many']) ? $data['collection_many'] : null;
        $this->container['collection_one'] = isset($data['collection_one']) ? $data['collection_one'] : null;
        $this->container['field_many'] = isset($data['field_many']) ? $data['field_many'] : null;
        $this->container['field_one'] = isset($data['field_one']) ? $data['field_one'] : null;
        $this->container['junction_field'] = isset($data['junction_field']) ? $data['junction_field'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets collection_many
     *
     * @return string
     */
    public function getCollectionMany()
    {
        return $this->container['collection_many'];
    }

    /**
     * Sets collection_many
     *
     * @param string $collection_many Collection that has the field that holds the foreign key.
     *
     * @return $this
     */
    public function setCollectionMany($collection_many)
    {
        $this->container['collection_many'] = $collection_many;

        return $this;
    }

    /**
     * Gets collection_one
     *
     * @return string
     */
    public function getCollectionOne()
    {
        return $this->container['collection_one'];
    }

    /**
     * Sets collection_one
     *
     * @param string $collection_one Collection on the _one_ side of the relationship.
     *
     * @return $this
     */
    public function setCollectionOne($collection_one)
    {
        $this->container['collection_one'] = $collection_one;

        return $this;
    }

    /**
     * Gets field_many
     *
     * @return string
     */
    public function getFieldMany()
    {
        return $this->container['field_many'];
    }

    /**
     * Sets field_many
     *
     * @param string $field_many Foreign key. Field that holds the primary key of the related collection.
     *
     * @return $this
     */
    public function setFieldMany($field_many)
    {
        $this->container['field_many'] = $field_many;

        return $this;
    }

    /**
     * Gets field_one
     *
     * @return string
     */
    public function getFieldOne()
    {
        return $this->container['field_one'];
    }

    /**
     * Sets field_one
     *
     * @param string $field_one Alias column that serves as the _one_ side of the relationship.
     *
     * @return $this
     */
    public function setFieldOne($field_one)
    {
        $this->container['field_one'] = $field_one;

        return $this;
    }

    /**
     * Gets junction_field
     *
     * @return string
     */
    public function getJunctionField()
    {
        return $this->container['junction_field'];
    }

    /**
     * Sets junction_field
     *
     * @param string $junction_field Field on the junction table that holds the primary key of the related collection.
     *
     * @return $this
     */
    public function setJunctionField($junction_field)
    {
        $this->container['junction_field'] = $junction_field;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
