<?php
/**
 * Collections
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Dynamic API Specification
 *
 * This is a dynamically generated API specification for all endpoints existing on the current project.
 *
 * OpenAPI spec version: 12.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.43
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Collections Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Collections implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Collections';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'collection' => 'string',
'icon' => 'string',
'note' => 'string',
'display_template' => 'string',
'hidden' => 'bool',
'singleton' => 'bool',
'translations' => '',
'archive_field' => 'string',
'archive_app_filter' => 'bool',
'archive_value' => 'string',
'unarchive_value' => 'string',
'sort_field' => 'string',
'accountability' => 'string',
'color' => 'string',
'item_duplication_fields' => '',
'sort' => 'int',
'group' => 'OneOfCollectionsGroup',
'collapse' => 'string',
'preview_url' => 'string',
'collection_divider' => 'string',
'preview_divider' => 'string',
'archive_divider' => 'string',
'sort_divider' => 'string',
'accountability_divider' => 'string',
'duplication_divider' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'collection' => null,
'icon' => null,
'note' => null,
'display_template' => null,
'hidden' => null,
'singleton' => null,
'translations' => null,
'archive_field' => null,
'archive_app_filter' => null,
'archive_value' => null,
'unarchive_value' => null,
'sort_field' => null,
'accountability' => null,
'color' => null,
'item_duplication_fields' => null,
'sort' => null,
'group' => null,
'collapse' => null,
'preview_url' => null,
'collection_divider' => null,
'preview_divider' => null,
'archive_divider' => null,
'sort_divider' => null,
'accountability_divider' => null,
'duplication_divider' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'collection' => 'collection',
'icon' => 'icon',
'note' => 'note',
'display_template' => 'display_template',
'hidden' => 'hidden',
'singleton' => 'singleton',
'translations' => 'translations',
'archive_field' => 'archive_field',
'archive_app_filter' => 'archive_app_filter',
'archive_value' => 'archive_value',
'unarchive_value' => 'unarchive_value',
'sort_field' => 'sort_field',
'accountability' => 'accountability',
'color' => 'color',
'item_duplication_fields' => 'item_duplication_fields',
'sort' => 'sort',
'group' => 'group',
'collapse' => 'collapse',
'preview_url' => 'preview_url',
'collection_divider' => 'collection_divider',
'preview_divider' => 'preview_divider',
'archive_divider' => 'archive_divider',
'sort_divider' => 'sort_divider',
'accountability_divider' => 'accountability_divider',
'duplication_divider' => 'duplication_divider'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'collection' => 'setCollection',
'icon' => 'setIcon',
'note' => 'setNote',
'display_template' => 'setDisplayTemplate',
'hidden' => 'setHidden',
'singleton' => 'setSingleton',
'translations' => 'setTranslations',
'archive_field' => 'setArchiveField',
'archive_app_filter' => 'setArchiveAppFilter',
'archive_value' => 'setArchiveValue',
'unarchive_value' => 'setUnarchiveValue',
'sort_field' => 'setSortField',
'accountability' => 'setAccountability',
'color' => 'setColor',
'item_duplication_fields' => 'setItemDuplicationFields',
'sort' => 'setSort',
'group' => 'setGroup',
'collapse' => 'setCollapse',
'preview_url' => 'setPreviewUrl',
'collection_divider' => 'setCollectionDivider',
'preview_divider' => 'setPreviewDivider',
'archive_divider' => 'setArchiveDivider',
'sort_divider' => 'setSortDivider',
'accountability_divider' => 'setAccountabilityDivider',
'duplication_divider' => 'setDuplicationDivider'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'collection' => 'getCollection',
'icon' => 'getIcon',
'note' => 'getNote',
'display_template' => 'getDisplayTemplate',
'hidden' => 'getHidden',
'singleton' => 'getSingleton',
'translations' => 'getTranslations',
'archive_field' => 'getArchiveField',
'archive_app_filter' => 'getArchiveAppFilter',
'archive_value' => 'getArchiveValue',
'unarchive_value' => 'getUnarchiveValue',
'sort_field' => 'getSortField',
'accountability' => 'getAccountability',
'color' => 'getColor',
'item_duplication_fields' => 'getItemDuplicationFields',
'sort' => 'getSort',
'group' => 'getGroup',
'collapse' => 'getCollapse',
'preview_url' => 'getPreviewUrl',
'collection_divider' => 'getCollectionDivider',
'preview_divider' => 'getPreviewDivider',
'archive_divider' => 'getArchiveDivider',
'sort_divider' => 'getSortDivider',
'accountability_divider' => 'getAccountabilityDivider',
'duplication_divider' => 'getDuplicationDivider'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['collection'] = isset($data['collection']) ? $data['collection'] : null;
        $this->container['icon'] = isset($data['icon']) ? $data['icon'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['display_template'] = isset($data['display_template']) ? $data['display_template'] : null;
        $this->container['hidden'] = isset($data['hidden']) ? $data['hidden'] : null;
        $this->container['singleton'] = isset($data['singleton']) ? $data['singleton'] : null;
        $this->container['translations'] = isset($data['translations']) ? $data['translations'] : null;
        $this->container['archive_field'] = isset($data['archive_field']) ? $data['archive_field'] : null;
        $this->container['archive_app_filter'] = isset($data['archive_app_filter']) ? $data['archive_app_filter'] : null;
        $this->container['archive_value'] = isset($data['archive_value']) ? $data['archive_value'] : null;
        $this->container['unarchive_value'] = isset($data['unarchive_value']) ? $data['unarchive_value'] : null;
        $this->container['sort_field'] = isset($data['sort_field']) ? $data['sort_field'] : null;
        $this->container['accountability'] = isset($data['accountability']) ? $data['accountability'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['item_duplication_fields'] = isset($data['item_duplication_fields']) ? $data['item_duplication_fields'] : null;
        $this->container['sort'] = isset($data['sort']) ? $data['sort'] : null;
        $this->container['group'] = isset($data['group']) ? $data['group'] : null;
        $this->container['collapse'] = isset($data['collapse']) ? $data['collapse'] : null;
        $this->container['preview_url'] = isset($data['preview_url']) ? $data['preview_url'] : null;
        $this->container['collection_divider'] = isset($data['collection_divider']) ? $data['collection_divider'] : null;
        $this->container['preview_divider'] = isset($data['preview_divider']) ? $data['preview_divider'] : null;
        $this->container['archive_divider'] = isset($data['archive_divider']) ? $data['archive_divider'] : null;
        $this->container['sort_divider'] = isset($data['sort_divider']) ? $data['sort_divider'] : null;
        $this->container['accountability_divider'] = isset($data['accountability_divider']) ? $data['accountability_divider'] : null;
        $this->container['duplication_divider'] = isset($data['duplication_divider']) ? $data['duplication_divider'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets collection
     *
     * @return string
     */
    public function getCollection()
    {
        return $this->container['collection'];
    }

    /**
     * Sets collection
     *
     * @param string $collection The collection key.
     *
     * @return $this
     */
    public function setCollection($collection)
    {
        $this->container['collection'] = $collection;

        return $this;
    }

    /**
     * Gets icon
     *
     * @return string
     */
    public function getIcon()
    {
        return $this->container['icon'];
    }

    /**
     * Sets icon
     *
     * @param string $icon icon
     *
     * @return $this
     */
    public function setIcon($icon)
    {
        $this->container['icon'] = $icon;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note note
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets display_template
     *
     * @return string
     */
    public function getDisplayTemplate()
    {
        return $this->container['display_template'];
    }

    /**
     * Sets display_template
     *
     * @param string $display_template display_template
     *
     * @return $this
     */
    public function setDisplayTemplate($display_template)
    {
        $this->container['display_template'] = $display_template;

        return $this;
    }

    /**
     * Gets hidden
     *
     * @return bool
     */
    public function getHidden()
    {
        return $this->container['hidden'];
    }

    /**
     * Sets hidden
     *
     * @param bool $hidden hidden
     *
     * @return $this
     */
    public function setHidden($hidden)
    {
        $this->container['hidden'] = $hidden;

        return $this;
    }

    /**
     * Gets singleton
     *
     * @return bool
     */
    public function getSingleton()
    {
        return $this->container['singleton'];
    }

    /**
     * Sets singleton
     *
     * @param bool $singleton singleton
     *
     * @return $this
     */
    public function setSingleton($singleton)
    {
        $this->container['singleton'] = $singleton;

        return $this;
    }

    /**
     * Gets translations
     *
     * @return 
     */
    public function getTranslations()
    {
        return $this->container['translations'];
    }

    /**
     * Sets translations
     *
     * @param  $translations translations
     *
     * @return $this
     */
    public function setTranslations($translations)
    {
        $this->container['translations'] = $translations;

        return $this;
    }

    /**
     * Gets archive_field
     *
     * @return string
     */
    public function getArchiveField()
    {
        return $this->container['archive_field'];
    }

    /**
     * Sets archive_field
     *
     * @param string $archive_field archive_field
     *
     * @return $this
     */
    public function setArchiveField($archive_field)
    {
        $this->container['archive_field'] = $archive_field;

        return $this;
    }

    /**
     * Gets archive_app_filter
     *
     * @return bool
     */
    public function getArchiveAppFilter()
    {
        return $this->container['archive_app_filter'];
    }

    /**
     * Sets archive_app_filter
     *
     * @param bool $archive_app_filter archive_app_filter
     *
     * @return $this
     */
    public function setArchiveAppFilter($archive_app_filter)
    {
        $this->container['archive_app_filter'] = $archive_app_filter;

        return $this;
    }

    /**
     * Gets archive_value
     *
     * @return string
     */
    public function getArchiveValue()
    {
        return $this->container['archive_value'];
    }

    /**
     * Sets archive_value
     *
     * @param string $archive_value archive_value
     *
     * @return $this
     */
    public function setArchiveValue($archive_value)
    {
        $this->container['archive_value'] = $archive_value;

        return $this;
    }

    /**
     * Gets unarchive_value
     *
     * @return string
     */
    public function getUnarchiveValue()
    {
        return $this->container['unarchive_value'];
    }

    /**
     * Sets unarchive_value
     *
     * @param string $unarchive_value unarchive_value
     *
     * @return $this
     */
    public function setUnarchiveValue($unarchive_value)
    {
        $this->container['unarchive_value'] = $unarchive_value;

        return $this;
    }

    /**
     * Gets sort_field
     *
     * @return string
     */
    public function getSortField()
    {
        return $this->container['sort_field'];
    }

    /**
     * Sets sort_field
     *
     * @param string $sort_field sort_field
     *
     * @return $this
     */
    public function setSortField($sort_field)
    {
        $this->container['sort_field'] = $sort_field;

        return $this;
    }

    /**
     * Gets accountability
     *
     * @return string
     */
    public function getAccountability()
    {
        return $this->container['accountability'];
    }

    /**
     * Sets accountability
     *
     * @param string $accountability accountability
     *
     * @return $this
     */
    public function setAccountability($accountability)
    {
        $this->container['accountability'] = $accountability;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string $color color
     *
     * @return $this
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets item_duplication_fields
     *
     * @return 
     */
    public function getItemDuplicationFields()
    {
        return $this->container['item_duplication_fields'];
    }

    /**
     * Sets item_duplication_fields
     *
     * @param  $item_duplication_fields item_duplication_fields
     *
     * @return $this
     */
    public function setItemDuplicationFields($item_duplication_fields)
    {
        $this->container['item_duplication_fields'] = $item_duplication_fields;

        return $this;
    }

    /**
     * Gets sort
     *
     * @return int
     */
    public function getSort()
    {
        return $this->container['sort'];
    }

    /**
     * Sets sort
     *
     * @param int $sort sort
     *
     * @return $this
     */
    public function setSort($sort)
    {
        $this->container['sort'] = $sort;

        return $this;
    }

    /**
     * Gets group
     *
     * @return OneOfCollectionsGroup
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param OneOfCollectionsGroup $group group
     *
     * @return $this
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets collapse
     *
     * @return string
     */
    public function getCollapse()
    {
        return $this->container['collapse'];
    }

    /**
     * Sets collapse
     *
     * @param string $collapse collapse
     *
     * @return $this
     */
    public function setCollapse($collapse)
    {
        $this->container['collapse'] = $collapse;

        return $this;
    }

    /**
     * Gets preview_url
     *
     * @return string
     */
    public function getPreviewUrl()
    {
        return $this->container['preview_url'];
    }

    /**
     * Sets preview_url
     *
     * @param string $preview_url preview_url
     *
     * @return $this
     */
    public function setPreviewUrl($preview_url)
    {
        $this->container['preview_url'] = $preview_url;

        return $this;
    }

    /**
     * Gets collection_divider
     *
     * @return string
     */
    public function getCollectionDivider()
    {
        return $this->container['collection_divider'];
    }

    /**
     * Sets collection_divider
     *
     * @param string $collection_divider collection_divider
     *
     * @return $this
     */
    public function setCollectionDivider($collection_divider)
    {
        $this->container['collection_divider'] = $collection_divider;

        return $this;
    }

    /**
     * Gets preview_divider
     *
     * @return string
     */
    public function getPreviewDivider()
    {
        return $this->container['preview_divider'];
    }

    /**
     * Sets preview_divider
     *
     * @param string $preview_divider preview_divider
     *
     * @return $this
     */
    public function setPreviewDivider($preview_divider)
    {
        $this->container['preview_divider'] = $preview_divider;

        return $this;
    }

    /**
     * Gets archive_divider
     *
     * @return string
     */
    public function getArchiveDivider()
    {
        return $this->container['archive_divider'];
    }

    /**
     * Sets archive_divider
     *
     * @param string $archive_divider archive_divider
     *
     * @return $this
     */
    public function setArchiveDivider($archive_divider)
    {
        $this->container['archive_divider'] = $archive_divider;

        return $this;
    }

    /**
     * Gets sort_divider
     *
     * @return string
     */
    public function getSortDivider()
    {
        return $this->container['sort_divider'];
    }

    /**
     * Sets sort_divider
     *
     * @param string $sort_divider sort_divider
     *
     * @return $this
     */
    public function setSortDivider($sort_divider)
    {
        $this->container['sort_divider'] = $sort_divider;

        return $this;
    }

    /**
     * Gets accountability_divider
     *
     * @return string
     */
    public function getAccountabilityDivider()
    {
        return $this->container['accountability_divider'];
    }

    /**
     * Sets accountability_divider
     *
     * @param string $accountability_divider accountability_divider
     *
     * @return $this
     */
    public function setAccountabilityDivider($accountability_divider)
    {
        $this->container['accountability_divider'] = $accountability_divider;

        return $this;
    }

    /**
     * Gets duplication_divider
     *
     * @return string
     */
    public function getDuplicationDivider()
    {
        return $this->container['duplication_divider'];
    }

    /**
     * Sets duplication_divider
     *
     * @param string $duplication_divider duplication_divider
     *
     * @return $this
     */
    public function setDuplicationDivider($duplication_divider)
    {
        $this->container['duplication_divider'] = $duplication_divider;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
