<?php
/**
 * Relations
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Dynamic API Specification
 *
 * This is a dynamically generated API specification for all endpoints existing on the current project.
 *
 * OpenAPI spec version: 12.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.43
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Relations Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Relations implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Relations';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'many_collection' => 'string',
'many_field' => 'string',
'one_collection' => 'string',
'one_field' => 'string',
'one_collection_field' => 'string',
'one_allowed_collections' => 'string[]',
'junction_field' => 'string',
'sort_field' => 'string',
'one_deselect_action' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'many_collection' => null,
'many_field' => null,
'one_collection' => null,
'one_field' => null,
'one_collection_field' => null,
'one_allowed_collections' => null,
'junction_field' => null,
'sort_field' => null,
'one_deselect_action' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'many_collection' => 'many_collection',
'many_field' => 'many_field',
'one_collection' => 'one_collection',
'one_field' => 'one_field',
'one_collection_field' => 'one_collection_field',
'one_allowed_collections' => 'one_allowed_collections',
'junction_field' => 'junction_field',
'sort_field' => 'sort_field',
'one_deselect_action' => 'one_deselect_action'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'many_collection' => 'setManyCollection',
'many_field' => 'setManyField',
'one_collection' => 'setOneCollection',
'one_field' => 'setOneField',
'one_collection_field' => 'setOneCollectionField',
'one_allowed_collections' => 'setOneAllowedCollections',
'junction_field' => 'setJunctionField',
'sort_field' => 'setSortField',
'one_deselect_action' => 'setOneDeselectAction'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'many_collection' => 'getManyCollection',
'many_field' => 'getManyField',
'one_collection' => 'getOneCollection',
'one_field' => 'getOneField',
'one_collection_field' => 'getOneCollectionField',
'one_allowed_collections' => 'getOneAllowedCollections',
'junction_field' => 'getJunctionField',
'sort_field' => 'getSortField',
'one_deselect_action' => 'getOneDeselectAction'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['many_collection'] = isset($data['many_collection']) ? $data['many_collection'] : null;
        $this->container['many_field'] = isset($data['many_field']) ? $data['many_field'] : null;
        $this->container['one_collection'] = isset($data['one_collection']) ? $data['one_collection'] : null;
        $this->container['one_field'] = isset($data['one_field']) ? $data['one_field'] : null;
        $this->container['one_collection_field'] = isset($data['one_collection_field']) ? $data['one_collection_field'] : null;
        $this->container['one_allowed_collections'] = isset($data['one_allowed_collections']) ? $data['one_allowed_collections'] : null;
        $this->container['junction_field'] = isset($data['junction_field']) ? $data['junction_field'] : null;
        $this->container['sort_field'] = isset($data['sort_field']) ? $data['sort_field'] : null;
        $this->container['one_deselect_action'] = isset($data['one_deselect_action']) ? $data['one_deselect_action'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Unique identifier for the relation.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets many_collection
     *
     * @return string
     */
    public function getManyCollection()
    {
        return $this->container['many_collection'];
    }

    /**
     * Sets many_collection
     *
     * @param string $many_collection Collection that has the field that holds the foreign key.
     *
     * @return $this
     */
    public function setManyCollection($many_collection)
    {
        $this->container['many_collection'] = $many_collection;

        return $this;
    }

    /**
     * Gets many_field
     *
     * @return string
     */
    public function getManyField()
    {
        return $this->container['many_field'];
    }

    /**
     * Sets many_field
     *
     * @param string $many_field Foreign key. Field that holds the primary key of the related collection.
     *
     * @return $this
     */
    public function setManyField($many_field)
    {
        $this->container['many_field'] = $many_field;

        return $this;
    }

    /**
     * Gets one_collection
     *
     * @return string
     */
    public function getOneCollection()
    {
        return $this->container['one_collection'];
    }

    /**
     * Sets one_collection
     *
     * @param string $one_collection Collection on the _one_ side of the relationship.
     *
     * @return $this
     */
    public function setOneCollection($one_collection)
    {
        $this->container['one_collection'] = $one_collection;

        return $this;
    }

    /**
     * Gets one_field
     *
     * @return string
     */
    public function getOneField()
    {
        return $this->container['one_field'];
    }

    /**
     * Sets one_field
     *
     * @param string $one_field Alias column that serves as the _one_ side of the relationship.
     *
     * @return $this
     */
    public function setOneField($one_field)
    {
        $this->container['one_field'] = $one_field;

        return $this;
    }

    /**
     * Gets one_collection_field
     *
     * @return string
     */
    public function getOneCollectionField()
    {
        return $this->container['one_collection_field'];
    }

    /**
     * Sets one_collection_field
     *
     * @param string $one_collection_field one_collection_field
     *
     * @return $this
     */
    public function setOneCollectionField($one_collection_field)
    {
        $this->container['one_collection_field'] = $one_collection_field;

        return $this;
    }

    /**
     * Gets one_allowed_collections
     *
     * @return string[]
     */
    public function getOneAllowedCollections()
    {
        return $this->container['one_allowed_collections'];
    }

    /**
     * Sets one_allowed_collections
     *
     * @param string[] $one_allowed_collections one_allowed_collections
     *
     * @return $this
     */
    public function setOneAllowedCollections($one_allowed_collections)
    {
        $this->container['one_allowed_collections'] = $one_allowed_collections;

        return $this;
    }

    /**
     * Gets junction_field
     *
     * @return string
     */
    public function getJunctionField()
    {
        return $this->container['junction_field'];
    }

    /**
     * Sets junction_field
     *
     * @param string $junction_field Field on the junction table that holds the many field of the related relation.
     *
     * @return $this
     */
    public function setJunctionField($junction_field)
    {
        $this->container['junction_field'] = $junction_field;

        return $this;
    }

    /**
     * Gets sort_field
     *
     * @return string
     */
    public function getSortField()
    {
        return $this->container['sort_field'];
    }

    /**
     * Sets sort_field
     *
     * @param string $sort_field sort_field
     *
     * @return $this
     */
    public function setSortField($sort_field)
    {
        $this->container['sort_field'] = $sort_field;

        return $this;
    }

    /**
     * Gets one_deselect_action
     *
     * @return string
     */
    public function getOneDeselectAction()
    {
        return $this->container['one_deselect_action'];
    }

    /**
     * Sets one_deselect_action
     *
     * @param string $one_deselect_action one_deselect_action
     *
     * @return $this
     */
    public function setOneDeselectAction($one_deselect_action)
    {
        $this->container['one_deselect_action'] = $one_deselect_action;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
