<?php
/**
 * SettingsStorageAssetPresets
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Dynamic API Specification
 *
 * This is a dynamically generated API specification for all endpoints existing on the current project.
 *
 * OpenAPI spec version: 12.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.43
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SettingsStorageAssetPresets Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SettingsStorageAssetPresets implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Settings_storage_asset_presets';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'key' => 'string',
'fit' => 'string',
'width' => 'int',
'height' => 'int',
'without_enlargement' => 'bool',
'quality' => 'int',
'format' => 'string',
'transforms' => '\Swagger\Client\Model\SettingsTransforms[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'key' => null,
'fit' => null,
'width' => null,
'height' => null,
'without_enlargement' => null,
'quality' => null,
'format' => null,
'transforms' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'key' => 'key',
'fit' => 'fit',
'width' => 'width',
'height' => 'height',
'without_enlargement' => 'withoutEnlargement',
'quality' => 'quality',
'format' => 'format',
'transforms' => 'transforms'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'key' => 'setKey',
'fit' => 'setFit',
'width' => 'setWidth',
'height' => 'setHeight',
'without_enlargement' => 'setWithoutEnlargement',
'quality' => 'setQuality',
'format' => 'setFormat',
'transforms' => 'setTransforms'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'key' => 'getKey',
'fit' => 'getFit',
'width' => 'getWidth',
'height' => 'getHeight',
'without_enlargement' => 'getWithoutEnlargement',
'quality' => 'getQuality',
'format' => 'getFormat',
'transforms' => 'getTransforms'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const FIT_COVER = 'cover';
const FIT_CONTAIN = 'contain';
const FIT_INSIDE = 'inside';
const FIT_OUTSIDE = 'outside';
const FORMAT_EMPTY = '';
const FORMAT_JPEG = 'jpeg';
const FORMAT_PNG = 'png';
const FORMAT_WEBP = 'webp';
const FORMAT_TIFF = 'tiff';
const FORMAT_AVIF = 'avif';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFitAllowableValues()
    {
        return [
            self::FIT_COVER,
self::FIT_CONTAIN,
self::FIT_INSIDE,
self::FIT_OUTSIDE,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFormatAllowableValues()
    {
        return [
            self::FORMAT_EMPTY,
self::FORMAT_JPEG,
self::FORMAT_PNG,
self::FORMAT_WEBP,
self::FORMAT_TIFF,
self::FORMAT_AVIF,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['key'] = isset($data['key']) ? $data['key'] : null;
        $this->container['fit'] = isset($data['fit']) ? $data['fit'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['without_enlargement'] = isset($data['without_enlargement']) ? $data['without_enlargement'] : null;
        $this->container['quality'] = isset($data['quality']) ? $data['quality'] : null;
        $this->container['format'] = isset($data['format']) ? $data['format'] : null;
        $this->container['transforms'] = isset($data['transforms']) ? $data['transforms'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getFitAllowableValues();
        if (!is_null($this->container['fit']) && !in_array($this->container['fit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'fit', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFormatAllowableValues();
        if (!is_null($this->container['format']) && !in_array($this->container['format'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'format', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets key
     *
     * @return string
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string $key Key for the asset. Used in the assets endpoint.
     *
     * @return $this
     */
    public function setKey($key)
    {
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets fit
     *
     * @return string
     */
    public function getFit()
    {
        return $this->container['fit'];
    }

    /**
     * Sets fit
     *
     * @param string $fit Whether to crop the thumbnail to match the size, or maintain the aspect ratio.
     *
     * @return $this
     */
    public function setFit($fit)
    {
        $allowedValues = $this->getFitAllowableValues();
        if (!is_null($fit) && !in_array($fit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'fit', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fit'] = $fit;

        return $this;
    }

    /**
     * Gets width
     *
     * @return int
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param int $width Width of the thumbnail.
     *
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     *
     * @return int
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param int $height Height of the thumbnail.
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets without_enlargement
     *
     * @return bool
     */
    public function getWithoutEnlargement()
    {
        return $this->container['without_enlargement'];
    }

    /**
     * Sets without_enlargement
     *
     * @param bool $without_enlargement No image upscale
     *
     * @return $this
     */
    public function setWithoutEnlargement($without_enlargement)
    {
        $this->container['without_enlargement'] = $without_enlargement;

        return $this;
    }

    /**
     * Gets quality
     *
     * @return int
     */
    public function getQuality()
    {
        return $this->container['quality'];
    }

    /**
     * Sets quality
     *
     * @param int $quality Quality of the compression used.
     *
     * @return $this
     */
    public function setQuality($quality)
    {
        $this->container['quality'] = $quality;

        return $this;
    }

    /**
     * Gets format
     *
     * @return string
     */
    public function getFormat()
    {
        return $this->container['format'];
    }

    /**
     * Sets format
     *
     * @param string $format Reformat output image
     *
     * @return $this
     */
    public function setFormat($format)
    {
        $allowedValues = $this->getFormatAllowableValues();
        if (!is_null($format) && !in_array($format, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'format', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['format'] = $format;

        return $this;
    }

    /**
     * Gets transforms
     *
     * @return \Swagger\Client\Model\SettingsTransforms[]
     */
    public function getTransforms()
    {
        return $this->container['transforms'];
    }

    /**
     * Sets transforms
     *
     * @param \Swagger\Client\Model\SettingsTransforms[] $transforms Additional transformations to apply
     *
     * @return $this
     */
    public function setTransforms($transforms)
    {
        $this->container['transforms'] = $transforms;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
