<?php
/**
 * Users
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Dynamic API Specification
 *
 * This is a dynamically generated API specification for all endpoints existing on the current project.
 *
 * OpenAPI spec version: 12.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.43
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Users Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Users implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Users';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'first_name' => 'string',
'last_name' => 'string',
'email' => 'string',
'password' => 'string',
'location' => 'string',
'title' => 'string',
'description' => 'string',
'tags' => 'string[]',
'avatar' => 'OneOfUsersAvatar',
'language' => 'string',
'theme' => 'string',
'tfa_secret' => 'string',
'status' => 'string',
'role' => 'OneOfUsersRole',
'token' => 'string',
'last_access' => 'string',
'last_page' => 'string',
'provider' => 'string',
'external_identifier' => 'string',
'auth_data' => '',
'email_notifications' => 'bool',
'preferences_divider' => 'string',
'admin_divider' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'first_name' => null,
'last_name' => null,
'email' => 'email',
'password' => null,
'location' => null,
'title' => null,
'description' => null,
'tags' => null,
'avatar' => null,
'language' => null,
'theme' => null,
'tfa_secret' => null,
'status' => null,
'role' => null,
'token' => null,
'last_access' => 'timestamp',
'last_page' => null,
'provider' => null,
'external_identifier' => null,
'auth_data' => null,
'email_notifications' => null,
'preferences_divider' => null,
'admin_divider' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'first_name' => 'first_name',
'last_name' => 'last_name',
'email' => 'email',
'password' => 'password',
'location' => 'location',
'title' => 'title',
'description' => 'description',
'tags' => 'tags',
'avatar' => 'avatar',
'language' => 'language',
'theme' => 'theme',
'tfa_secret' => 'tfa_secret',
'status' => 'status',
'role' => 'role',
'token' => 'token',
'last_access' => 'last_access',
'last_page' => 'last_page',
'provider' => 'provider',
'external_identifier' => 'external_identifier',
'auth_data' => 'auth_data',
'email_notifications' => 'email_notifications',
'preferences_divider' => 'preferences_divider',
'admin_divider' => 'admin_divider'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'first_name' => 'setFirstName',
'last_name' => 'setLastName',
'email' => 'setEmail',
'password' => 'setPassword',
'location' => 'setLocation',
'title' => 'setTitle',
'description' => 'setDescription',
'tags' => 'setTags',
'avatar' => 'setAvatar',
'language' => 'setLanguage',
'theme' => 'setTheme',
'tfa_secret' => 'setTfaSecret',
'status' => 'setStatus',
'role' => 'setRole',
'token' => 'setToken',
'last_access' => 'setLastAccess',
'last_page' => 'setLastPage',
'provider' => 'setProvider',
'external_identifier' => 'setExternalIdentifier',
'auth_data' => 'setAuthData',
'email_notifications' => 'setEmailNotifications',
'preferences_divider' => 'setPreferencesDivider',
'admin_divider' => 'setAdminDivider'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'first_name' => 'getFirstName',
'last_name' => 'getLastName',
'email' => 'getEmail',
'password' => 'getPassword',
'location' => 'getLocation',
'title' => 'getTitle',
'description' => 'getDescription',
'tags' => 'getTags',
'avatar' => 'getAvatar',
'language' => 'getLanguage',
'theme' => 'getTheme',
'tfa_secret' => 'getTfaSecret',
'status' => 'getStatus',
'role' => 'getRole',
'token' => 'getToken',
'last_access' => 'getLastAccess',
'last_page' => 'getLastPage',
'provider' => 'getProvider',
'external_identifier' => 'getExternalIdentifier',
'auth_data' => 'getAuthData',
'email_notifications' => 'getEmailNotifications',
'preferences_divider' => 'getPreferencesDivider',
'admin_divider' => 'getAdminDivider'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const THEME_LIGHT = 'light';
const THEME_DARK = 'dark';
const THEME_AUTO = 'auto';
const STATUS_ACTIVE = 'active';
const STATUS_INVITED = 'invited';
const STATUS_DRAFT = 'draft';
const STATUS_SUSPENDED = 'suspended';
const STATUS_DELETED = 'deleted';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getThemeAllowableValues()
    {
        return [
            self::THEME_LIGHT,
self::THEME_DARK,
self::THEME_AUTO,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACTIVE,
self::STATUS_INVITED,
self::STATUS_DRAFT,
self::STATUS_SUSPENDED,
self::STATUS_DELETED,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['avatar'] = isset($data['avatar']) ? $data['avatar'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['theme'] = isset($data['theme']) ? $data['theme'] : null;
        $this->container['tfa_secret'] = isset($data['tfa_secret']) ? $data['tfa_secret'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['role'] = isset($data['role']) ? $data['role'] : null;
        $this->container['token'] = isset($data['token']) ? $data['token'] : null;
        $this->container['last_access'] = isset($data['last_access']) ? $data['last_access'] : null;
        $this->container['last_page'] = isset($data['last_page']) ? $data['last_page'] : null;
        $this->container['provider'] = isset($data['provider']) ? $data['provider'] : null;
        $this->container['external_identifier'] = isset($data['external_identifier']) ? $data['external_identifier'] : null;
        $this->container['auth_data'] = isset($data['auth_data']) ? $data['auth_data'] : null;
        $this->container['email_notifications'] = isset($data['email_notifications']) ? $data['email_notifications'] : null;
        $this->container['preferences_divider'] = isset($data['preferences_divider']) ? $data['preferences_divider'] : null;
        $this->container['admin_divider'] = isset($data['admin_divider']) ? $data['admin_divider'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getThemeAllowableValues();
        if (!is_null($this->container['theme']) && !in_array($this->container['theme'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'theme', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique identifier for the user.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name First name of the user.
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name Last name of the user.
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Unique email address for the user.
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password Password of the user.
     *
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location The user's location.
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The user's title.
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The user's description.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[] $tags The user's tags.
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets avatar
     *
     * @return OneOfUsersAvatar
     */
    public function getAvatar()
    {
        return $this->container['avatar'];
    }

    /**
     * Sets avatar
     *
     * @param OneOfUsersAvatar $avatar The user's avatar.
     *
     * @return $this
     */
    public function setAvatar($avatar)
    {
        $this->container['avatar'] = $avatar;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language The user's language used in Directus.
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets theme
     *
     * @return string
     */
    public function getTheme()
    {
        return $this->container['theme'];
    }

    /**
     * Sets theme
     *
     * @param string $theme What theme the user is using.
     *
     * @return $this
     */
    public function setTheme($theme)
    {
        $allowedValues = $this->getThemeAllowableValues();
        if (!is_null($theme) && !in_array($theme, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'theme', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['theme'] = $theme;

        return $this;
    }

    /**
     * Gets tfa_secret
     *
     * @return string
     */
    public function getTfaSecret()
    {
        return $this->container['tfa_secret'];
    }

    /**
     * Sets tfa_secret
     *
     * @param string $tfa_secret The 2FA secret string that's used to generate one time passwords.
     *
     * @return $this
     */
    public function setTfaSecret($tfa_secret)
    {
        $this->container['tfa_secret'] = $tfa_secret;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Status of the user.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets role
     *
     * @return OneOfUsersRole
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param OneOfUsersRole $role Unique identifier of the role of this user.
     *
     * @return $this
     */
    public function setRole($role)
    {
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string $token Static token for the user.
     *
     * @return $this
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets last_access
     *
     * @return string
     */
    public function getLastAccess()
    {
        return $this->container['last_access'];
    }

    /**
     * Sets last_access
     *
     * @param string $last_access last_access
     *
     * @return $this
     */
    public function setLastAccess($last_access)
    {
        $this->container['last_access'] = $last_access;

        return $this;
    }

    /**
     * Gets last_page
     *
     * @return string
     */
    public function getLastPage()
    {
        return $this->container['last_page'];
    }

    /**
     * Sets last_page
     *
     * @param string $last_page Last page that the user was on.
     *
     * @return $this
     */
    public function setLastPage($last_page)
    {
        $this->container['last_page'] = $last_page;

        return $this;
    }

    /**
     * Gets provider
     *
     * @return string
     */
    public function getProvider()
    {
        return $this->container['provider'];
    }

    /**
     * Sets provider
     *
     * @param string $provider provider
     *
     * @return $this
     */
    public function setProvider($provider)
    {
        $this->container['provider'] = $provider;

        return $this;
    }

    /**
     * Gets external_identifier
     *
     * @return string
     */
    public function getExternalIdentifier()
    {
        return $this->container['external_identifier'];
    }

    /**
     * Sets external_identifier
     *
     * @param string $external_identifier external_identifier
     *
     * @return $this
     */
    public function setExternalIdentifier($external_identifier)
    {
        $this->container['external_identifier'] = $external_identifier;

        return $this;
    }

    /**
     * Gets auth_data
     *
     * @return 
     */
    public function getAuthData()
    {
        return $this->container['auth_data'];
    }

    /**
     * Sets auth_data
     *
     * @param  $auth_data auth_data
     *
     * @return $this
     */
    public function setAuthData($auth_data)
    {
        $this->container['auth_data'] = $auth_data;

        return $this;
    }

    /**
     * Gets email_notifications
     *
     * @return bool
     */
    public function getEmailNotifications()
    {
        return $this->container['email_notifications'];
    }

    /**
     * Sets email_notifications
     *
     * @param bool $email_notifications email_notifications
     *
     * @return $this
     */
    public function setEmailNotifications($email_notifications)
    {
        $this->container['email_notifications'] = $email_notifications;

        return $this;
    }

    /**
     * Gets preferences_divider
     *
     * @return string
     */
    public function getPreferencesDivider()
    {
        return $this->container['preferences_divider'];
    }

    /**
     * Sets preferences_divider
     *
     * @param string $preferences_divider preferences_divider
     *
     * @return $this
     */
    public function setPreferencesDivider($preferences_divider)
    {
        $this->container['preferences_divider'] = $preferences_divider;

        return $this;
    }

    /**
     * Gets admin_divider
     *
     * @return string
     */
    public function getAdminDivider()
    {
        return $this->container['admin_divider'];
    }

    /**
     * Sets admin_divider
     *
     * @param string $admin_divider admin_divider
     *
     * @return $this
     */
    public function setAdminDivider($admin_divider)
    {
        $this->container['admin_divider'] = $admin_divider;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
