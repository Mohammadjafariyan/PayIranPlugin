<?php
/**
 * ItemsPerson
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Dynamic API Specification
 *
 * This is a dynamically generated API specification for all endpoints existing on the current project.
 *
 * OpenAPI spec version: 12.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.43
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ItemsPerson Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ItemsPerson implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ItemsPerson';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'status' => 'string',
'sort' => 'int',
'user_created' => 'OneOfItemsPersonUserCreated',
'date_created' => 'string',
'user_updated' => 'OneOfItemsPersonUserUpdated',
'date_updated' => 'string',
'person_type' => 'string',
'national_code' => 'string',
'first_name_last_name' => 'string',
'birthday_year' => 'int',
'birthday_month' => 'int',
'day' => 'int',
'id_number' => 'string',
'mobile' => 'string',
'phone' => 'string',
'tax_tracking_code' => 'string',
'postal_code' => 'string',
'province' => 'OneOfItemsPersonProvince',
'city' => 'OneOfItemsPersonCity',
'address' => 'string',
'national_card_photo' => 'OneOfItemsPersonNationalCardPhoto',
'national_id_photo' => 'OneOfItemsPersonNationalIdPhoto',
'other_doc_photo' => 'OneOfItemsPersonOtherDocPhoto',
'company_name' => 'string',
'company_national_code' => 'string',
'register_number' => 'string',
'regiser_year' => 'int',
'register_month' => 'int',
'registerday' => 'int',
'tax_tracking_code' => 'string',
'economic_code' => 'string',
'company_postal_code' => 'string',
'company_address' => 'string',
'company_phone' => 'string',
'company_docs' => 'OneOfItemsPersonCompanyDocs',
'real_panel' => 'string',
'legal_person' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'status' => null,
'sort' => null,
'user_created' => null,
'date_created' => 'timestamp',
'user_updated' => null,
'date_updated' => 'timestamp',
'person_type' => null,
'national_code' => null,
'first_name_last_name' => null,
'birthday_year' => null,
'birthday_month' => null,
'day' => null,
'id_number' => null,
'mobile' => null,
'phone' => null,
'tax_tracking_code' => null,
'postal_code' => null,
'province' => null,
'city' => null,
'address' => null,
'national_card_photo' => null,
'national_id_photo' => null,
'other_doc_photo' => null,
'company_name' => null,
'company_national_code' => null,
'register_number' => null,
'regiser_year' => null,
'register_month' => null,
'registerday' => null,
'tax_tracking_code' => null,
'economic_code' => null,
'company_postal_code' => null,
'company_address' => null,
'company_phone' => null,
'company_docs' => null,
'real_panel' => null,
'legal_person' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'status' => 'status',
'sort' => 'sort',
'user_created' => 'user_created',
'date_created' => 'date_created',
'user_updated' => 'user_updated',
'date_updated' => 'date_updated',
'person_type' => 'PersonType',
'national_code' => 'NationalCode',
'first_name_last_name' => 'FirstNameLastName',
'birthday_year' => 'BirthdayYear',
'birthday_month' => 'BirthdayMonth',
'day' => 'day',
'id_number' => 'IdNumber',
'mobile' => 'Mobile',
'phone' => 'Phone',
'tax_tracking_code' => 'Tax_tracking_code',
'postal_code' => 'PostalCode',
'province' => 'Province',
'city' => 'City',
'address' => 'Address',
'national_card_photo' => 'NationalCardPhoto',
'national_id_photo' => 'NationalIdPhoto',
'other_doc_photo' => 'OtherDocPhoto',
'company_name' => 'CompanyName',
'company_national_code' => 'CompanyNationalCode',
'register_number' => 'RegisterNumber',
'regiser_year' => 'RegiserYear',
'register_month' => 'RegisterMonth',
'registerday' => 'Registerday',
'tax_tracking_code' => 'TaxTrackingCode',
'economic_code' => 'Economic_code',
'company_postal_code' => 'CompanyPostalCode',
'company_address' => 'CompanyAddress',
'company_phone' => 'CompanyPhone',
'company_docs' => 'CompanyDocs',
'real_panel' => 'RealPanel',
'legal_person' => 'LegalPerson'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'status' => 'setStatus',
'sort' => 'setSort',
'user_created' => 'setUserCreated',
'date_created' => 'setDateCreated',
'user_updated' => 'setUserUpdated',
'date_updated' => 'setDateUpdated',
'person_type' => 'setPersonType',
'national_code' => 'setNationalCode',
'first_name_last_name' => 'setFirstNameLastName',
'birthday_year' => 'setBirthdayYear',
'birthday_month' => 'setBirthdayMonth',
'day' => 'setDay',
'id_number' => 'setIdNumber',
'mobile' => 'setMobile',
'phone' => 'setPhone',
'tax_tracking_code' => 'setTaxTrackingCode',
'postal_code' => 'setPostalCode',
'province' => 'setProvince',
'city' => 'setCity',
'address' => 'setAddress',
'national_card_photo' => 'setNationalCardPhoto',
'national_id_photo' => 'setNationalIdPhoto',
'other_doc_photo' => 'setOtherDocPhoto',
'company_name' => 'setCompanyName',
'company_national_code' => 'setCompanyNationalCode',
'register_number' => 'setRegisterNumber',
'regiser_year' => 'setRegiserYear',
'register_month' => 'setRegisterMonth',
'registerday' => 'setRegisterday',
'tax_tracking_code' => 'setTaxTrackingCode',
'economic_code' => 'setEconomicCode',
'company_postal_code' => 'setCompanyPostalCode',
'company_address' => 'setCompanyAddress',
'company_phone' => 'setCompanyPhone',
'company_docs' => 'setCompanyDocs',
'real_panel' => 'setRealPanel',
'legal_person' => 'setLegalPerson'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'status' => 'getStatus',
'sort' => 'getSort',
'user_created' => 'getUserCreated',
'date_created' => 'getDateCreated',
'user_updated' => 'getUserUpdated',
'date_updated' => 'getDateUpdated',
'person_type' => 'getPersonType',
'national_code' => 'getNationalCode',
'first_name_last_name' => 'getFirstNameLastName',
'birthday_year' => 'getBirthdayYear',
'birthday_month' => 'getBirthdayMonth',
'day' => 'getDay',
'id_number' => 'getIdNumber',
'mobile' => 'getMobile',
'phone' => 'getPhone',
'tax_tracking_code' => 'getTaxTrackingCode',
'postal_code' => 'getPostalCode',
'province' => 'getProvince',
'city' => 'getCity',
'address' => 'getAddress',
'national_card_photo' => 'getNationalCardPhoto',
'national_id_photo' => 'getNationalIdPhoto',
'other_doc_photo' => 'getOtherDocPhoto',
'company_name' => 'getCompanyName',
'company_national_code' => 'getCompanyNationalCode',
'register_number' => 'getRegisterNumber',
'regiser_year' => 'getRegiserYear',
'register_month' => 'getRegisterMonth',
'registerday' => 'getRegisterday',
'tax_tracking_code' => 'getTaxTrackingCode',
'economic_code' => 'getEconomicCode',
'company_postal_code' => 'getCompanyPostalCode',
'company_address' => 'getCompanyAddress',
'company_phone' => 'getCompanyPhone',
'company_docs' => 'getCompanyDocs',
'real_panel' => 'getRealPanel',
'legal_person' => 'getLegalPerson'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['sort'] = isset($data['sort']) ? $data['sort'] : null;
        $this->container['user_created'] = isset($data['user_created']) ? $data['user_created'] : null;
        $this->container['date_created'] = isset($data['date_created']) ? $data['date_created'] : null;
        $this->container['user_updated'] = isset($data['user_updated']) ? $data['user_updated'] : null;
        $this->container['date_updated'] = isset($data['date_updated']) ? $data['date_updated'] : null;
        $this->container['person_type'] = isset($data['person_type']) ? $data['person_type'] : null;
        $this->container['national_code'] = isset($data['national_code']) ? $data['national_code'] : null;
        $this->container['first_name_last_name'] = isset($data['first_name_last_name']) ? $data['first_name_last_name'] : null;
        $this->container['birthday_year'] = isset($data['birthday_year']) ? $data['birthday_year'] : null;
        $this->container['birthday_month'] = isset($data['birthday_month']) ? $data['birthday_month'] : null;
        $this->container['day'] = isset($data['day']) ? $data['day'] : null;
        $this->container['id_number'] = isset($data['id_number']) ? $data['id_number'] : null;
        $this->container['mobile'] = isset($data['mobile']) ? $data['mobile'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['tax_tracking_code'] = isset($data['tax_tracking_code']) ? $data['tax_tracking_code'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['province'] = isset($data['province']) ? $data['province'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['national_card_photo'] = isset($data['national_card_photo']) ? $data['national_card_photo'] : null;
        $this->container['national_id_photo'] = isset($data['national_id_photo']) ? $data['national_id_photo'] : null;
        $this->container['other_doc_photo'] = isset($data['other_doc_photo']) ? $data['other_doc_photo'] : null;
        $this->container['company_name'] = isset($data['company_name']) ? $data['company_name'] : null;
        $this->container['company_national_code'] = isset($data['company_national_code']) ? $data['company_national_code'] : null;
        $this->container['register_number'] = isset($data['register_number']) ? $data['register_number'] : null;
        $this->container['regiser_year'] = isset($data['regiser_year']) ? $data['regiser_year'] : null;
        $this->container['register_month'] = isset($data['register_month']) ? $data['register_month'] : null;
        $this->container['registerday'] = isset($data['registerday']) ? $data['registerday'] : null;
        $this->container['tax_tracking_code'] = isset($data['tax_tracking_code']) ? $data['tax_tracking_code'] : null;
        $this->container['economic_code'] = isset($data['economic_code']) ? $data['economic_code'] : null;
        $this->container['company_postal_code'] = isset($data['company_postal_code']) ? $data['company_postal_code'] : null;
        $this->container['company_address'] = isset($data['company_address']) ? $data['company_address'] : null;
        $this->container['company_phone'] = isset($data['company_phone']) ? $data['company_phone'] : null;
        $this->container['company_docs'] = isset($data['company_docs']) ? $data['company_docs'] : null;
        $this->container['real_panel'] = isset($data['real_panel']) ? $data['real_panel'] : null;
        $this->container['legal_person'] = isset($data['legal_person']) ? $data['legal_person'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets sort
     *
     * @return int
     */
    public function getSort()
    {
        return $this->container['sort'];
    }

    /**
     * Sets sort
     *
     * @param int $sort sort
     *
     * @return $this
     */
    public function setSort($sort)
    {
        $this->container['sort'] = $sort;

        return $this;
    }

    /**
     * Gets user_created
     *
     * @return OneOfItemsPersonUserCreated
     */
    public function getUserCreated()
    {
        return $this->container['user_created'];
    }

    /**
     * Sets user_created
     *
     * @param OneOfItemsPersonUserCreated $user_created user_created
     *
     * @return $this
     */
    public function setUserCreated($user_created)
    {
        $this->container['user_created'] = $user_created;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return string
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param string $date_created date_created
     *
     * @return $this
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets user_updated
     *
     * @return OneOfItemsPersonUserUpdated
     */
    public function getUserUpdated()
    {
        return $this->container['user_updated'];
    }

    /**
     * Sets user_updated
     *
     * @param OneOfItemsPersonUserUpdated $user_updated user_updated
     *
     * @return $this
     */
    public function setUserUpdated($user_updated)
    {
        $this->container['user_updated'] = $user_updated;

        return $this;
    }

    /**
     * Gets date_updated
     *
     * @return string
     */
    public function getDateUpdated()
    {
        return $this->container['date_updated'];
    }

    /**
     * Sets date_updated
     *
     * @param string $date_updated date_updated
     *
     * @return $this
     */
    public function setDateUpdated($date_updated)
    {
        $this->container['date_updated'] = $date_updated;

        return $this;
    }

    /**
     * Gets person_type
     *
     * @return string
     */
    public function getPersonType()
    {
        return $this->container['person_type'];
    }

    /**
     * Sets person_type
     *
     * @param string $person_type person_type
     *
     * @return $this
     */
    public function setPersonType($person_type)
    {
        $this->container['person_type'] = $person_type;

        return $this;
    }

    /**
     * Gets national_code
     *
     * @return string
     */
    public function getNationalCode()
    {
        return $this->container['national_code'];
    }

    /**
     * Sets national_code
     *
     * @param string $national_code national_code
     *
     * @return $this
     */
    public function setNationalCode($national_code)
    {
        $this->container['national_code'] = $national_code;

        return $this;
    }

    /**
     * Gets first_name_last_name
     *
     * @return string
     */
    public function getFirstNameLastName()
    {
        return $this->container['first_name_last_name'];
    }

    /**
     * Sets first_name_last_name
     *
     * @param string $first_name_last_name first_name_last_name
     *
     * @return $this
     */
    public function setFirstNameLastName($first_name_last_name)
    {
        $this->container['first_name_last_name'] = $first_name_last_name;

        return $this;
    }

    /**
     * Gets birthday_year
     *
     * @return int
     */
    public function getBirthdayYear()
    {
        return $this->container['birthday_year'];
    }

    /**
     * Sets birthday_year
     *
     * @param int $birthday_year birthday_year
     *
     * @return $this
     */
    public function setBirthdayYear($birthday_year)
    {
        $this->container['birthday_year'] = $birthday_year;

        return $this;
    }

    /**
     * Gets birthday_month
     *
     * @return int
     */
    public function getBirthdayMonth()
    {
        return $this->container['birthday_month'];
    }

    /**
     * Sets birthday_month
     *
     * @param int $birthday_month birthday_month
     *
     * @return $this
     */
    public function setBirthdayMonth($birthday_month)
    {
        $this->container['birthday_month'] = $birthday_month;

        return $this;
    }

    /**
     * Gets day
     *
     * @return int
     */
    public function getDay()
    {
        return $this->container['day'];
    }

    /**
     * Sets day
     *
     * @param int $day day
     *
     * @return $this
     */
    public function setDay($day)
    {
        $this->container['day'] = $day;

        return $this;
    }

    /**
     * Gets id_number
     *
     * @return string
     */
    public function getIdNumber()
    {
        return $this->container['id_number'];
    }

    /**
     * Sets id_number
     *
     * @param string $id_number id_number
     *
     * @return $this
     */
    public function setIdNumber($id_number)
    {
        $this->container['id_number'] = $id_number;

        return $this;
    }

    /**
     * Gets mobile
     *
     * @return string
     */
    public function getMobile()
    {
        return $this->container['mobile'];
    }

    /**
     * Sets mobile
     *
     * @param string $mobile mobile
     *
     * @return $this
     */
    public function setMobile($mobile)
    {
        $this->container['mobile'] = $mobile;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets tax_tracking_code
     *
     * @return string
     */
    public function getTaxTrackingCode()
    {
        return $this->container['tax_tracking_code'];
    }

    /**
     * Sets tax_tracking_code
     *
     * @param string $tax_tracking_code tax_tracking_code
     *
     * @return $this
     */
    public function setTaxTrackingCode($tax_tracking_code)
    {
        $this->container['tax_tracking_code'] = $tax_tracking_code;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string $postal_code postal_code
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets province
     *
     * @return OneOfItemsPersonProvince
     */
    public function getProvince()
    {
        return $this->container['province'];
    }

    /**
     * Sets province
     *
     * @param OneOfItemsPersonProvince $province province
     *
     * @return $this
     */
    public function setProvince($province)
    {
        $this->container['province'] = $province;

        return $this;
    }

    /**
     * Gets city
     *
     * @return OneOfItemsPersonCity
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param OneOfItemsPersonCity $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets national_card_photo
     *
     * @return OneOfItemsPersonNationalCardPhoto
     */
    public function getNationalCardPhoto()
    {
        return $this->container['national_card_photo'];
    }

    /**
     * Sets national_card_photo
     *
     * @param OneOfItemsPersonNationalCardPhoto $national_card_photo national_card_photo
     *
     * @return $this
     */
    public function setNationalCardPhoto($national_card_photo)
    {
        $this->container['national_card_photo'] = $national_card_photo;

        return $this;
    }

    /**
     * Gets national_id_photo
     *
     * @return OneOfItemsPersonNationalIdPhoto
     */
    public function getNationalIdPhoto()
    {
        return $this->container['national_id_photo'];
    }

    /**
     * Sets national_id_photo
     *
     * @param OneOfItemsPersonNationalIdPhoto $national_id_photo national_id_photo
     *
     * @return $this
     */
    public function setNationalIdPhoto($national_id_photo)
    {
        $this->container['national_id_photo'] = $national_id_photo;

        return $this;
    }

    /**
     * Gets other_doc_photo
     *
     * @return OneOfItemsPersonOtherDocPhoto
     */
    public function getOtherDocPhoto()
    {
        return $this->container['other_doc_photo'];
    }

    /**
     * Sets other_doc_photo
     *
     * @param OneOfItemsPersonOtherDocPhoto $other_doc_photo other_doc_photo
     *
     * @return $this
     */
    public function setOtherDocPhoto($other_doc_photo)
    {
        $this->container['other_doc_photo'] = $other_doc_photo;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string $company_name company_name
     *
     * @return $this
     */
    public function setCompanyName($company_name)
    {
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets company_national_code
     *
     * @return string
     */
    public function getCompanyNationalCode()
    {
        return $this->container['company_national_code'];
    }

    /**
     * Sets company_national_code
     *
     * @param string $company_national_code company_national_code
     *
     * @return $this
     */
    public function setCompanyNationalCode($company_national_code)
    {
        $this->container['company_national_code'] = $company_national_code;

        return $this;
    }

    /**
     * Gets register_number
     *
     * @return string
     */
    public function getRegisterNumber()
    {
        return $this->container['register_number'];
    }

    /**
     * Sets register_number
     *
     * @param string $register_number register_number
     *
     * @return $this
     */
    public function setRegisterNumber($register_number)
    {
        $this->container['register_number'] = $register_number;

        return $this;
    }

    /**
     * Gets regiser_year
     *
     * @return int
     */
    public function getRegiserYear()
    {
        return $this->container['regiser_year'];
    }

    /**
     * Sets regiser_year
     *
     * @param int $regiser_year regiser_year
     *
     * @return $this
     */
    public function setRegiserYear($regiser_year)
    {
        $this->container['regiser_year'] = $regiser_year;

        return $this;
    }

    /**
     * Gets register_month
     *
     * @return int
     */
    public function getRegisterMonth()
    {
        return $this->container['register_month'];
    }

    /**
     * Sets register_month
     *
     * @param int $register_month register_month
     *
     * @return $this
     */
    public function setRegisterMonth($register_month)
    {
        $this->container['register_month'] = $register_month;

        return $this;
    }

    /**
     * Gets registerday
     *
     * @return int
     */
    public function getRegisterday()
    {
        return $this->container['registerday'];
    }

    /**
     * Sets registerday
     *
     * @param int $registerday registerday
     *
     * @return $this
     */
    public function setRegisterday($registerday)
    {
        $this->container['registerday'] = $registerday;

        return $this;
    }

    /**
     * Gets tax_tracking_code
     *
     * @return string
     */
    public function getTaxTrackingCode()
    {
        return $this->container['tax_tracking_code'];
    }

    /**
     * Sets tax_tracking_code
     *
     * @param string $tax_tracking_code tax_tracking_code
     *
     * @return $this
     */
    public function setTaxTrackingCode($tax_tracking_code)
    {
        $this->container['tax_tracking_code'] = $tax_tracking_code;

        return $this;
    }

    /**
     * Gets economic_code
     *
     * @return string
     */
    public function getEconomicCode()
    {
        return $this->container['economic_code'];
    }

    /**
     * Sets economic_code
     *
     * @param string $economic_code economic_code
     *
     * @return $this
     */
    public function setEconomicCode($economic_code)
    {
        $this->container['economic_code'] = $economic_code;

        return $this;
    }

    /**
     * Gets company_postal_code
     *
     * @return string
     */
    public function getCompanyPostalCode()
    {
        return $this->container['company_postal_code'];
    }

    /**
     * Sets company_postal_code
     *
     * @param string $company_postal_code company_postal_code
     *
     * @return $this
     */
    public function setCompanyPostalCode($company_postal_code)
    {
        $this->container['company_postal_code'] = $company_postal_code;

        return $this;
    }

    /**
     * Gets company_address
     *
     * @return string
     */
    public function getCompanyAddress()
    {
        return $this->container['company_address'];
    }

    /**
     * Sets company_address
     *
     * @param string $company_address company_address
     *
     * @return $this
     */
    public function setCompanyAddress($company_address)
    {
        $this->container['company_address'] = $company_address;

        return $this;
    }

    /**
     * Gets company_phone
     *
     * @return string
     */
    public function getCompanyPhone()
    {
        return $this->container['company_phone'];
    }

    /**
     * Sets company_phone
     *
     * @param string $company_phone company_phone
     *
     * @return $this
     */
    public function setCompanyPhone($company_phone)
    {
        $this->container['company_phone'] = $company_phone;

        return $this;
    }

    /**
     * Gets company_docs
     *
     * @return OneOfItemsPersonCompanyDocs
     */
    public function getCompanyDocs()
    {
        return $this->container['company_docs'];
    }

    /**
     * Sets company_docs
     *
     * @param OneOfItemsPersonCompanyDocs $company_docs تصاویر روزنامه رسمی ثبت شخصیت حقوقی و نیز آخرین تغییرات چاپ شده را آپلود نمایید.
     *
     * @return $this
     */
    public function setCompanyDocs($company_docs)
    {
        $this->container['company_docs'] = $company_docs;

        return $this;
    }

    /**
     * Gets real_panel
     *
     * @return string
     */
    public function getRealPanel()
    {
        return $this->container['real_panel'];
    }

    /**
     * Sets real_panel
     *
     * @param string $real_panel real_panel
     *
     * @return $this
     */
    public function setRealPanel($real_panel)
    {
        $this->container['real_panel'] = $real_panel;

        return $this;
    }

    /**
     * Gets legal_person
     *
     * @return string
     */
    public function getLegalPerson()
    {
        return $this->container['legal_person'];
    }

    /**
     * Sets legal_person
     *
     * @param string $legal_person legal_person
     *
     * @return $this
     */
    public function setLegalPerson($legal_person)
    {
        $this->container['legal_person'] = $legal_person;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
