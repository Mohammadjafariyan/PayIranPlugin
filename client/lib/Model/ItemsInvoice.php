<?php
/**
 * ItemsInvoice
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Dynamic API Specification
 *
 * This is a dynamically generated API specification for all endpoints existing on the current project.
 *
 * OpenAPI spec version: 12.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.43
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ItemsInvoice Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ItemsInvoice implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ItemsInvoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'status' => 'string',
'sort' => 'int',
'user_created' => 'OneOfItemsInvoiceUserCreated',
'date_created' => 'string',
'user_updated' => 'OneOfItemsInvoiceUserUpdated',
'date_updated' => 'string',
'gateway' => 'OneOfItemsInvoiceGateway',
'invoice_type' => 'OneOfItemsInvoiceInvoiceType',
'title' => 'string',
'order_id' => 'string',
'amount' => 'float',
'phone' => 'string',
'mail' => 'string',
'desc' => 'string',
'callback' => 'string',
'access_token' => 'string',
'gateway_token' => 'string',
'requester_info' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
'status' => null,
'sort' => null,
'user_created' => null,
'date_created' => 'timestamp',
'user_updated' => null,
'date_updated' => 'timestamp',
'gateway' => null,
'invoice_type' => null,
'title' => null,
'order_id' => null,
'amount' => null,
'phone' => null,
'mail' => null,
'desc' => null,
'callback' => null,
'access_token' => null,
'gateway_token' => null,
'requester_info' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'status' => 'status',
'sort' => 'sort',
'user_created' => 'user_created',
'date_created' => 'date_created',
'user_updated' => 'user_updated',
'date_updated' => 'date_updated',
'gateway' => 'Gateway',
'invoice_type' => 'InvoiceType',
'title' => 'Title',
'order_id' => 'order_id',
'amount' => 'amount',
'phone' => 'phone',
'mail' => 'mail',
'desc' => 'desc',
'callback' => 'callback',
'access_token' => 'access_token',
'gateway_token' => 'gateway_token',
'requester_info' => 'requesterInfo'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'status' => 'setStatus',
'sort' => 'setSort',
'user_created' => 'setUserCreated',
'date_created' => 'setDateCreated',
'user_updated' => 'setUserUpdated',
'date_updated' => 'setDateUpdated',
'gateway' => 'setGateway',
'invoice_type' => 'setInvoiceType',
'title' => 'setTitle',
'order_id' => 'setOrderId',
'amount' => 'setAmount',
'phone' => 'setPhone',
'mail' => 'setMail',
'desc' => 'setDesc',
'callback' => 'setCallback',
'access_token' => 'setAccessToken',
'gateway_token' => 'setGatewayToken',
'requester_info' => 'setRequesterInfo'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'status' => 'getStatus',
'sort' => 'getSort',
'user_created' => 'getUserCreated',
'date_created' => 'getDateCreated',
'user_updated' => 'getUserUpdated',
'date_updated' => 'getDateUpdated',
'gateway' => 'getGateway',
'invoice_type' => 'getInvoiceType',
'title' => 'getTitle',
'order_id' => 'getOrderId',
'amount' => 'getAmount',
'phone' => 'getPhone',
'mail' => 'getMail',
'desc' => 'getDesc',
'callback' => 'getCallback',
'access_token' => 'getAccessToken',
'gateway_token' => 'getGatewayToken',
'requester_info' => 'getRequesterInfo'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['sort'] = isset($data['sort']) ? $data['sort'] : null;
        $this->container['user_created'] = isset($data['user_created']) ? $data['user_created'] : null;
        $this->container['date_created'] = isset($data['date_created']) ? $data['date_created'] : null;
        $this->container['user_updated'] = isset($data['user_updated']) ? $data['user_updated'] : null;
        $this->container['date_updated'] = isset($data['date_updated']) ? $data['date_updated'] : null;
        $this->container['gateway'] = isset($data['gateway']) ? $data['gateway'] : null;
        $this->container['invoice_type'] = isset($data['invoice_type']) ? $data['invoice_type'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['mail'] = isset($data['mail']) ? $data['mail'] : null;
        $this->container['desc'] = isset($data['desc']) ? $data['desc'] : null;
        $this->container['callback'] = isset($data['callback']) ? $data['callback'] : null;
        $this->container['access_token'] = isset($data['access_token']) ? $data['access_token'] : null;
        $this->container['gateway_token'] = isset($data['gateway_token']) ? $data['gateway_token'] : null;
        $this->container['requester_info'] = isset($data['requester_info']) ? $data['requester_info'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets sort
     *
     * @return int
     */
    public function getSort()
    {
        return $this->container['sort'];
    }

    /**
     * Sets sort
     *
     * @param int $sort sort
     *
     * @return $this
     */
    public function setSort($sort)
    {
        $this->container['sort'] = $sort;

        return $this;
    }

    /**
     * Gets user_created
     *
     * @return OneOfItemsInvoiceUserCreated
     */
    public function getUserCreated()
    {
        return $this->container['user_created'];
    }

    /**
     * Sets user_created
     *
     * @param OneOfItemsInvoiceUserCreated $user_created user_created
     *
     * @return $this
     */
    public function setUserCreated($user_created)
    {
        $this->container['user_created'] = $user_created;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return string
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param string $date_created date_created
     *
     * @return $this
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets user_updated
     *
     * @return OneOfItemsInvoiceUserUpdated
     */
    public function getUserUpdated()
    {
        return $this->container['user_updated'];
    }

    /**
     * Sets user_updated
     *
     * @param OneOfItemsInvoiceUserUpdated $user_updated user_updated
     *
     * @return $this
     */
    public function setUserUpdated($user_updated)
    {
        $this->container['user_updated'] = $user_updated;

        return $this;
    }

    /**
     * Gets date_updated
     *
     * @return string
     */
    public function getDateUpdated()
    {
        return $this->container['date_updated'];
    }

    /**
     * Sets date_updated
     *
     * @param string $date_updated date_updated
     *
     * @return $this
     */
    public function setDateUpdated($date_updated)
    {
        $this->container['date_updated'] = $date_updated;

        return $this;
    }

    /**
     * Gets gateway
     *
     * @return OneOfItemsInvoiceGateway
     */
    public function getGateway()
    {
        return $this->container['gateway'];
    }

    /**
     * Sets gateway
     *
     * @param OneOfItemsInvoiceGateway $gateway gateway
     *
     * @return $this
     */
    public function setGateway($gateway)
    {
        $this->container['gateway'] = $gateway;

        return $this;
    }

    /**
     * Gets invoice_type
     *
     * @return OneOfItemsInvoiceInvoiceType
     */
    public function getInvoiceType()
    {
        return $this->container['invoice_type'];
    }

    /**
     * Sets invoice_type
     *
     * @param OneOfItemsInvoiceInvoiceType $invoice_type invoice_type
     *
     * @return $this
     */
    public function setInvoiceType($invoice_type)
    {
        $this->container['invoice_type'] = $invoice_type;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string $order_id order_id
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets mail
     *
     * @return string
     */
    public function getMail()
    {
        return $this->container['mail'];
    }

    /**
     * Sets mail
     *
     * @param string $mail mail
     *
     * @return $this
     */
    public function setMail($mail)
    {
        $this->container['mail'] = $mail;

        return $this;
    }

    /**
     * Gets desc
     *
     * @return string
     */
    public function getDesc()
    {
        return $this->container['desc'];
    }

    /**
     * Sets desc
     *
     * @param string $desc desc
     *
     * @return $this
     */
    public function setDesc($desc)
    {
        $this->container['desc'] = $desc;

        return $this;
    }

    /**
     * Gets callback
     *
     * @return string
     */
    public function getCallback()
    {
        return $this->container['callback'];
    }

    /**
     * Sets callback
     *
     * @param string $callback callback
     *
     * @return $this
     */
    public function setCallback($callback)
    {
        $this->container['callback'] = $callback;

        return $this;
    }

    /**
     * Gets access_token
     *
     * @return string
     */
    public function getAccessToken()
    {
        return $this->container['access_token'];
    }

    /**
     * Sets access_token
     *
     * @param string $access_token access_token
     *
     * @return $this
     */
    public function setAccessToken($access_token)
    {
        $this->container['access_token'] = $access_token;

        return $this;
    }

    /**
     * Gets gateway_token
     *
     * @return string
     */
    public function getGatewayToken()
    {
        return $this->container['gateway_token'];
    }

    /**
     * Sets gateway_token
     *
     * @param string $gateway_token gateway_token
     *
     * @return $this
     */
    public function setGatewayToken($gateway_token)
    {
        $this->container['gateway_token'] = $gateway_token;

        return $this;
    }

    /**
     * Gets requester_info
     *
     * @return string
     */
    public function getRequesterInfo()
    {
        return $this->container['requester_info'];
    }

    /**
     * Sets requester_info
     *
     * @param string $requester_info requester_info
     *
     * @return $this
     */
    public function setRequesterInfo($requester_info)
    {
        $this->container['requester_info'] = $requester_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
